[{"F:\\cinecup\\src\\index.js":"1","F:\\cinecup\\src\\reportWebVitals.js":"2","F:\\cinecup\\src\\App.js":"3","F:\\cinecup\\src\\reducer\\index.js":"4","F:\\cinecup\\src\\fontawesome.js":"5","F:\\cinecup\\src\\action\\movie_actions.js":"6","F:\\cinecup\\src\\auth.js":"7","F:\\cinecup\\src\\Components\\LoginPageComponent\\ResetPassword.js":"8","F:\\cinecup\\src\\Components\\SearchPageComponent\\SearchPageComponent.js":"9","F:\\cinecup\\src\\Components\\ErrorPageComponent\\ErrorPageComponent.js":"10","F:\\cinecup\\src\\Components\\HomePageComponent\\HomePageComponent.js":"11","F:\\cinecup\\src\\Components\\LoginPageComponent\\LoginPageComponent.js":"12","F:\\cinecup\\src\\Components\\HistoryDetailComponent\\HistoryDetailComponent.js":"13","F:\\cinecup\\src\\Components\\MoviePageComponent\\MoviePageComponent.js":"14","F:\\cinecup\\src\\Components\\LeaderboardPageComponent\\LeaderboardPageComponent.js":"15","F:\\cinecup\\src\\Components\\DashboardPageComponent\\DashboardPageComponent.js":"16","F:\\cinecup\\src\\Components\\SignUpPageComponent\\SignUpPageComponent.js":"17","F:\\cinecup\\src\\Components\\AdminDashboardComponent\\AdminDashboardComponent.js":"18","F:\\cinecup\\src\\Components\\HistoryComponent\\HistoryComponent.js":"19","F:\\cinecup\\src\\Components\\HeaderComponent\\HeaderComponent.js":"20","F:\\cinecup\\src\\reducer\\user_reducer.js":"21","F:\\cinecup\\src\\Components\\SearchPageComponent\\Search.js":"22","F:\\cinecup\\src\\action\\user_actions.js":"23","F:\\cinecup\\src\\action\\types.js":"24","F:\\cinecup\\src\\key\\key.js":"25","F:\\cinecup\\src\\Components\\SearchPageComponent\\Popup.js":"26","F:\\cinecup\\src\\Components\\SearchPageComponent\\Results.js":"27","F:\\cinecup\\src\\Components\\shareButton.js":"28","F:\\cinecup\\src\\Components\\SearchPageComponent\\Result.js":"29","F:\\cinecup\\src\\theme.js":"30","F:\\cinecup\\src\\global.js":"31","F:\\cinecup\\src\\Components\\Toggle.js":"32","F:\\cinecup\\src\\Components\\UserProfile\\UserProfile.js":"33","F:\\cinecup\\src\\Components\\scrollToTop.js":"34"},{"size":1667,"mtime":1611916762872,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":1611916545908,"results":"37","hashOfConfig":"36"},{"size":5204,"mtime":1611916759925,"results":"38","hashOfConfig":"36"},{"size":154,"mtime":1611385334200,"results":"39","hashOfConfig":"36"},{"size":297,"mtime":1611916533520,"results":"40","hashOfConfig":"36"},{"size":16117,"mtime":1611916762786,"results":"41","hashOfConfig":"36"},{"size":1102,"mtime":1611916530883,"results":"42","hashOfConfig":"36"},{"size":3573,"mtime":1611916461984,"results":"43","hashOfConfig":"36"},{"size":4714,"mtime":1611916762130,"results":"44","hashOfConfig":"36"},{"size":1826,"mtime":1611916413426,"results":"45","hashOfConfig":"36"},{"size":6552,"mtime":1611916441004,"results":"46","hashOfConfig":"36"},{"size":7651,"mtime":1611916761674,"results":"47","hashOfConfig":"36"},{"size":8514,"mtime":1611916761251,"results":"48","hashOfConfig":"36"},{"size":9768,"mtime":1611916761882,"results":"49","hashOfConfig":"36"},{"size":5581,"mtime":1611916761359,"results":"50","hashOfConfig":"36"},{"size":11714,"mtime":1611916760812,"results":"51","hashOfConfig":"36"},{"size":10625,"mtime":1611916762318,"results":"52","hashOfConfig":"36"},{"size":20612,"mtime":1611916760366,"results":"53","hashOfConfig":"36"},{"size":3475,"mtime":1611916761067,"results":"54","hashOfConfig":"36"},{"size":14547,"mtime":1611916760972,"results":"55","hashOfConfig":"36"},{"size":7260,"mtime":1611859666632,"results":"56","hashOfConfig":"36"},{"size":583,"mtime":1611916482564,"results":"57","hashOfConfig":"36"},{"size":17667,"mtime":1611934713406,"results":"58","hashOfConfig":"36"},{"size":2394,"mtime":1611916384938,"results":"59","hashOfConfig":"36"},{"size":258,"mtime":1611916518651,"results":"60","hashOfConfig":"36"},{"size":1017,"mtime":1611916475445,"results":"61","hashOfConfig":"36"},{"size":584,"mtime":1611916480571,"results":"62","hashOfConfig":"36"},{"size":1220,"mtime":1611916509040,"results":"63","hashOfConfig":"36"},{"size":5281,"mtime":1611916762013,"results":"64","hashOfConfig":"36"},{"size":824,"mtime":1611916552629,"results":"65","hashOfConfig":"36"},{"size":1672,"mtime":1611916536406,"results":"66","hashOfConfig":"36"},{"size":556,"mtime":1611916511516,"results":"67","hashOfConfig":"36"},{"size":4744,"mtime":1611916762445,"results":"68","hashOfConfig":"36"},{"size":1158,"mtime":1611916762542,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"lakeq2",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"72"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"72"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"72"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"F:\\cinecup\\src\\index.js",[],["161","162"],"F:\\cinecup\\src\\reportWebVitals.js",[],"F:\\cinecup\\src\\App.js",["163"],"import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './fontawesome';\nimport './App.css';\nimport DashBoardPageComponent from './Components/DashboardPageComponent/DashboardPageComponent';\nimport ErrorPageComponent from './Components/ErrorPageComponent/ErrorPageComponent';\n\nimport HeaderComponent from './Components/HeaderComponent/HeaderComponent';\nimport HomePageComponent from './Components/HomePageComponent/HomePageComponent';\nimport LoginPageComponent from './Components/LoginPageComponent/LoginPageComponent';\nimport SearchPageComponent from './Components/SearchPageComponent/SearchPageComponent';\nimport SignUpPageComponent from './Components/SignUpPageComponent/SignUpPageComponent';\nimport MoviePageComponent from './Components/MoviePageComponent/MoviePageComponent';\nimport LeaderboardPageComponent from './Components/LeaderboardPageComponent/LeaderboardPageComponent';\nimport AdminDashboardComponent from './Components/AdminDashboardComponent/AdminDashboardComponent';\nimport Auth from './auth';\nimport ResetPassword from './Components/LoginPageComponent/ResetPassword';\nimport { useDispatch } from 'react-redux';\nimport {\n  fetchBlackListedMovies,\n  fetchHistory,\n  fetchMoviesData,\n  getAnnouncement,\n  getVotingOnOff,\n} from './action/movie_actions';\nimport React, { useEffect, useState } from 'react';\nimport HistoryComponent from './Components/HistoryComponent/HistoryComponent';\nimport HistoryDetailComponent from './Components/HistoryDetailComponent/HistoryDetailComponent';\nimport { ThemeProvider } from 'styled-components';\n\nimport { lightTheme, darkTheme } from './theme';\nimport { GlobalStyles } from './global';\nimport UserProfile from './Components/UserProfile/UserProfile';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [theme, setTheme] = useState('light');\n  const [componentMounted, setComponentMounted] = useState(false);\n\n  function setMode(mode) {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  }\n\n  function toggleTheme() {\n    if (theme === 'light') {\n      setMode('dark');\n    } else {\n      setMode('light');\n    }\n  }\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches &&\n    !localTheme\n      ? setMode('dark')\n      : localTheme\n      ? setTheme(localTheme)\n      : setMode('light');\n\n    setComponentMounted(true);\n  }, []);\n\n  useEffect(() => {\n    dispatch(fetchMoviesData());\n    dispatch(fetchBlackListedMovies());\n    dispatch(getVotingOnOff());\n    dispatch(fetchHistory());\n    dispatch(getAnnouncement());\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <>\n        <BrowserRouter>\n          <div className='App'>\n            <GlobalStyles />\n            <HeaderComponent\n              toggleTheme={toggleTheme}\n              theme={theme}\n              componentMounted={componentMounted}\n            ></HeaderComponent>\n            <Switch>\n              <Route\n                exact\n                path='/'\n                component={Auth(HomePageComponent, null)}\n              ></Route>\n              <Route\n                exact\n                path='/leaderboard'\n                component={Auth(LeaderboardPageComponent, null)}\n              ></Route>\n              <Route\n                exact\n                path='/login'\n                component={Auth(LoginPageComponent, false)}\n              ></Route>\n              <Route\n                exact\n                path='/resetpassword'\n                component={Auth(ResetPassword, false)}\n              ></Route>\n              <Route\n                exact\n                path='/signup'\n                component={Auth(SignUpPageComponent, false)}\n              ></Route>\n              <Route\n                exact\n                path='/dashboard'\n                component={Auth(DashBoardPageComponent, true)}\n              ></Route>\n              <Route\n                exact\n                path='/history'\n                component={Auth(HistoryComponent, null)}\n              ></Route>\n              <Route\n                exact\n                path='/history/:contest_id'\n                component={Auth(HistoryDetailComponent, null)}\n              ></Route>\n              <Route\n                exact\n                path='/admin'\n                component={Auth(AdminDashboardComponent, true, true)}\n              ></Route>\n              <Route\n                exact\n                path='/search'\n                component={Auth(SearchPageComponent, null)}\n              ></Route>\n              <Route\n                exact\n                path='/movie/:movie_id'\n                component={Auth(MoviePageComponent, null)}\n              ></Route>\n              <Route\n                exact\n                path='/user/:user_id'\n                component={Auth(UserProfile, null)}\n              ></Route>\n              <Route\n                path='*'\n                component={Auth(ErrorPageComponent, null)}\n              ></Route>\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","F:\\cinecup\\src\\reducer\\index.js",[],"F:\\cinecup\\src\\fontawesome.js",[],"F:\\cinecup\\src\\action\\movie_actions.js",["164","165","166","167","168","169"],"import firebase from 'firebase';\nimport axios from 'axios';\nimport { TMDB_API_KEY, USERNAME, PASSWORD, API } from '../key/key';\nimport {\n  FETCH_MOVIES_DATA_REQUEST,\n  FETCH_MOVIES_DATA_SUCCESS,\n  BLACKLIST_MOVIE_SUCCESS,\n  BLACKLIST_MOVIE_FAILURE,\n  BLACKLIST_MOVIE_FETCH,\n  REMOVE_BLACKLISTED_MOVIE_SUCCESS,\n  REMOVE_BLACKLISTED_MOVIE_FAILURE,\n  FETCH_VOTING_SUCCESS,\n  START_VOTING_SUCCESS,\n  START_VOTING_FAILURE,\n  END_VOTING_SUCCESS,\n  END_VOTING_FAILURE,\n  FETCH_HISTORY_SUCCESS,\n  FETCH_ANNOUNCEMENT_SUCCESS,\n  ADD_ANNOUNCEMENT_SUCCESS,\n  ADD_ANNOUNCEMENT_FAILURE,\n  REMOVE_ANNOUNCEMENT_FAILURE,\n  REMOVE_ANNOUNCEMENT_SUCCESS,\n  SET_QUERY_STRING,\n} from './types';\n\n// ==================================== Fetching Movies Data =======================================\nexport const fetchMoviesData = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_MOVIES_DATA_REQUEST,\n    });\n    const db = firebase.firestore();\n    let unsubscribe = db\n      .collection('movies')\n      .orderBy('Votes', 'desc')\n      .onSnapshot(function (querySnapshot) {\n        let arr = [];\n        let i = 1;\n        let j = 1;\n        let prevVotes, currVotes;\n        querySnapshot.forEach(function (doc) {\n          currVotes = doc.data().Votes;\n          if (i === 1) prevVotes = doc.data().Votes;\n          if (prevVotes !== currVotes) {\n            j = i;\n            prevVotes = currVotes;\n          }\n          arr.push({\n            id: doc.data().MovieId,\n            votes: doc.data().Votes,\n            rank: j,\n          });\n          i++;\n        });\n        xyz(arr).then(result => {\n          dispatch({\n            type: FETCH_MOVIES_DATA_SUCCESS,\n            payload: result,\n          });\n        });\n      });\n  };\n};\n\nasync function xyz(arr) {\n  let r = [];\n  for (let i = 0; i < arr.length; i++) {\n    let element = arr[i];\n    let res = await axios(\n      `https://api.themoviedb.org/3/movie/${element.id}?api_key=${TMDB_API_KEY}`\n    );\n    r.push({ ...res.data, rank: element.rank, votes: element.votes });\n    if (i === arr.length - 1) {\n      return r;\n    }\n  }\n}\n// ================================ Fetching History ===========================================\nexport const fetchHistory = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_MOVIES_DATA_REQUEST,\n    });\n    const db = firebase.firestore();\n    let unsubscribe = db\n      .collection('history')\n      .orderBy('Start', 'desc')\n      .onSnapshot(function (querySnapshot) {\n        let arr = [];\n        querySnapshot.forEach(function (doc) {\n          if (doc.data().End) {\n            let sdate;\n            let sDay;\n            let sTime;\n            if (doc.data().Start) {\n              sdate = new Date(doc.data().Start.toMillis());\n              sDay = `${sdate.getDate()} ${sdate.toLocaleString('default', {\n                month: 'short',\n              })},${sdate.getFullYear()}`;\n              sTime = `${sdate.getHours()}:${sdate.getMinutes()}`;\n            }\n            let edate;\n            let eDay;\n            let eTime;\n            if (doc.data() && doc.data().End) {\n              edate = new Date(doc.data().End.toMillis());\n              eDay = `${edate.getDate()} ${edate.toLocaleString('default', {\n                month: 'short',\n              })},${edate.getFullYear()}`;\n              eTime = `${edate.getHours()}:${edate.getMinutes()}`;\n            }\n            arr.push({\n              ...doc.data(),\n              contestid: doc.id,\n              sDay: sDay,\n              sTime: sTime,\n              eDay: eDay,\n              eTime: eTime,\n            });\n          }\n        });\n        dispatch({\n          type: FETCH_HISTORY_SUCCESS,\n          payload: arr,\n        });\n      });\n  };\n};\n\n// ================================ Fetching Blacklisted Movies ==================================\n\nexport const fetchBlackListedMovies = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_MOVIES_DATA_REQUEST,\n    });\n    const db = firebase.firestore();\n    let unsubscribe = db\n      .collection('blacklist')\n      .onSnapshot(function (querySnapshot) {\n        let arr = [];\n        querySnapshot.forEach(function (doc) {\n          arr.push(doc.id);\n        });\n        dispatch({\n          type: BLACKLIST_MOVIE_FETCH,\n          payload: arr,\n        });\n      });\n  };\n};\n\n// ================================== Blacklisting Movie =========================================\n\nexport const blackListMovie = ({ movieId, movieName }) => {\n  return async dispatch => {\n    const db = firebase.firestore();\n    // getting all users and removing blacklisted movie from their nominations\n    db.collection('users')\n      .get()\n      .then(async function (querySnapshot) {\n        var batch = db.batch();\n\n        let mailto = [];\n\n        querySnapshot.forEach(doc => {\n          var usersref = db.collection('users').doc(doc.id);\n          if (doc.data().Nominations.includes(movieId))\n            mailto.push(doc.data().Email);\n          batch.set(\n            usersref,\n            {\n              Nominations: firebase.firestore.FieldValue.arrayRemove(movieId),\n            },\n            { merge: true }\n          );\n        });\n        // adding movie to blacklist\n        let blacklistRef = db.collection('blacklist').doc(movieId.toString());\n        batch.set(blacklistRef, {\n          MovieId: movieId.toString(),\n        });\n\n        // deleting movie and it's votes from movies\n        let moviesRef = db.collection('movies').doc(movieId.toString());\n        batch.delete(moviesRef);\n\n        let res = await axios.post(`${API}/token`, {\n          username: USERNAME,\n          password: PASSWORD,\n        });\n        if (res.data.accessToken) {\n          let token = res.data.accessToken;\n          axios\n            .post(\n              `${API}/send`,\n              { receivers: mailto, movieName: movieName },\n              {\n                headers: {\n                  Authorization: `Bearer ${token}`,\n                },\n              }\n            )\n            .then(res => {});\n        }\n        // Commit the batch\n        batch.commit().then(function () {\n          dispatch({\n            type: BLACKLIST_MOVIE_SUCCESS,\n          });\n        });\n      });\n  };\n};\n\n// ======================================= Removing Blacklisted Movie ===============================\nexport const removeBlacklistedMovie = ({ movieId }) => {\n  return async dispatch => {\n    const db = firebase.firestore();\n    db.collection('blacklist')\n      .doc(movieId.toString())\n      .delete()\n      .then(function () {\n        dispatch({\n          type: REMOVE_BLACKLISTED_MOVIE_SUCCESS,\n        });\n      })\n      .catch(function (error) {\n        console.error('Error removing document: ', error);\n        dispatch({\n          type: REMOVE_BLACKLISTED_MOVIE_FAILURE,\n          payload: error,\n        });\n      });\n  };\n};\n// Get ---------------------------VotingOnOff---------------------------------------\nexport const getVotingOnOff = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_MOVIES_DATA_REQUEST,\n    });\n    const db = firebase.firestore();\n    var docRef = db.collection('on').doc('onoroff');\n    docRef\n      .get()\n      .then(function (doc) {\n        if (doc.exists) {\n          dispatch({\n            type: FETCH_VOTING_SUCCESS,\n            payload: doc.data().on,\n          });\n        }\n      })\n      .catch(function (error) {});\n  };\n};\n\n// ===================================== Start Voting =====================================\nexport const startVoting = ({ Name }) => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_MOVIES_DATA_REQUEST,\n    });\n    const db = firebase.firestore();\n    var docRef = db.collection('on').doc('onoroff');\n    docRef\n      .update({\n        on: true,\n      })\n      .then(function () {\n        db.collection('history')\n          .add({\n            Name: Name,\n            Start: new Date(),\n            Ongoing: true,\n          })\n          .then(async function (docRef) {\n            dispatch({\n              type: START_VOTING_SUCCESS,\n            });\n            try {\n              let { docs } = await db.collection('users').get();\n              let receivers = [];\n              docs.forEach(doc => {\n                receivers.push(doc.id);\n              });\n              let tokenres = await axios.post(`${API}/token`, {\n                username: USERNAME,\n                password: PASSWORD,\n              });\n              let res = await axios.post(\n                `${API}/startcontest`,\n                { cname: Name, receivers: receivers },\n                {\n                  headers: {\n                    Authorization: `Bearer ${tokenres.data.accessToken}`,\n                  },\n                }\n              );\n            } catch (err) {}\n          })\n          .catch(function (error) {\n            console.error('Error adding document: ', error);\n            dispatch({\n              type: START_VOTING_FAILURE,\n            });\n          });\n      })\n      .catch(function (error) {\n        console.error('Error updating document: ', error);\n        dispatch({\n          type: START_VOTING_FAILURE,\n        });\n      });\n  };\n};\n\n// ===================================== myfunction ======================================\nasync function myfunction({ docs }) {\n  let topThree = [];\n  for (let i = 0; i < docs.length; i++) {\n    let doc = docs[i];\n    topThree.push({\n      movieId: doc.data().MovieId,\n      votes: doc.data().Votes,\n      rank: i + 1,\n    });\n    if (i === docs.length - 1) return topThree;\n  }\n  return topThree;\n}\n\n// ===================================== End Voting =======================================\n\nexport const stopVoting = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_MOVIES_DATA_REQUEST,\n    });\n    try {\n      const db = firebase.firestore();\n      // =================== Getting the top 3 movies =======================\n      let movieRef = db.collection('movies').orderBy('Votes', 'desc');\n      let querySnapshot = await movieRef.get();\n      // ================= Storing top three in movies array =================\n      let topThree = await myfunction(querySnapshot);\n      if (topThree.length) {\n        let cidDetail;\n        var batch = db.batch();\n        db.collection('history')\n          .where('Ongoing', '==', true)\n          .get()\n          .then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              let history = db.collection('history').doc(doc.id);\n              cidDetail = history;\n              batch.set(\n                history,\n                {\n                  Movies: topThree,\n                  Ongoing: false,\n                  End: new Date(),\n                },\n                { merge: true }\n              );\n            });\n            // =========================== Set voting on to false =================================\n            let onRef = db.collection('on').doc('onoroff');\n            batch.set(onRef, {\n              on: false,\n            });\n            // =========================== Deleting Votes of all Movies ===========================\n            db.collection('movies')\n              .get()\n              .then(function (querySnapshot) {\n                querySnapshot.forEach(function (doc) {\n                  let x = db.collection('movies').doc(doc.id);\n                  batch.delete(x);\n                });\n                // =========================== Removing all nominations =======================\n                db.collection('users')\n                  .get()\n                  .then(function (querySnapshot) {\n                    querySnapshot.forEach(function (doc) {\n                      let x = db.collection('users').doc(doc.id);\n                      batch.update(x, { Nominations: [] });\n                    });\n                    // Commit the batch\n                    batch\n                      .commit()\n                      .then(async function () {\n                        dispatch({\n                          type: END_VOTING_SUCCESS,\n                        });\n                        try {\n                          let doc = await cidDetail.get();\n                          let { docs } = await db.collection('users').get();\n                          let receivers = [];\n                          docs.forEach(doc => {\n                            receivers.push(doc.id);\n                          });\n                          let tokenres = await axios.post(`${API}/token`, {\n                            username: USERNAME,\n                            password: PASSWORD,\n                          });\n                          let res = await axios.post(\n                            `${API}/endcontest`,\n                            {\n                              cname: doc.data().Name,\n                              cid: doc.id,\n                              receivers: receivers,\n                            },\n                            {\n                              headers: {\n                                Authorization: `Bearer ${tokenres.data.accessToken}`,\n                              },\n                            }\n                          );\n                        } catch (err) {}\n                      })\n                      .catch(function (error) {\n                        dispatch({\n                          type: END_VOTING_FAILURE,\n                        });\n                      });\n                  })\n                  .catch(function (error) {\n                    dispatch({\n                      type: END_VOTING_FAILURE,\n                    });\n                  });\n              })\n              .catch(function (error) {\n                dispatch({\n                  type: END_VOTING_FAILURE,\n                });\n              });\n          })\n          .catch(function (error) {\n            dispatch({\n              type: END_VOTING_FAILURE,\n            });\n          });\n      } else {\n        dispatch({\n          type: END_VOTING_FAILURE,\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: END_VOTING_FAILURE,\n      });\n    }\n  };\n};\n\n// ================================= fetch announcement ================================\n\nexport const getAnnouncement = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_MOVIES_DATA_REQUEST,\n    });\n    const db = firebase.firestore();\n    var docRef = db.collection('on').doc('announce');\n    docRef.onSnapshot(function (doc) {\n      if (doc.exists) {\n        dispatch({\n          type: FETCH_ANNOUNCEMENT_SUCCESS,\n          payload: doc.data().list,\n        });\n      }\n    });\n  };\n};\n\n// ============================== add announcement ======================================\nexport const addAnnouncement = announcement => {\n  return async dispatch => {\n    const db = firebase.firestore();\n    var announcementRef = db.collection('on').doc('announce');\n    announcementRef\n      .update({\n        list: firebase.firestore.FieldValue.arrayUnion(announcement),\n      })\n      .then(() => {\n        dispatch({\n          type: ADD_ANNOUNCEMENT_SUCCESS,\n        });\n      })\n      .catch(err => {\n        dispatch({\n          type: ADD_ANNOUNCEMENT_FAILURE,\n        });\n      });\n  };\n};\n\n// ============================= REMOVE ANNOUNCEMENT =====================================\nexport const removeAnnouncement = announcement => {\n  return async dispatch => {\n    const db = firebase.firestore();\n    var announcementRef = db.collection('on').doc('announce');\n    announcementRef\n      .update({\n        list: firebase.firestore.FieldValue.arrayRemove(announcement),\n      })\n      .then(() => {\n        dispatch({\n          type: REMOVE_ANNOUNCEMENT_SUCCESS,\n        });\n      })\n      .catch(err => {\n        dispatch({\n          type: REMOVE_ANNOUNCEMENT_FAILURE,\n        });\n      });\n  };\n};\n// ================================= SEARCH QUERY ====================================\nexport const setqueryString = value => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_STRING,\n      payload: value,\n    });\n  };\n};\n","F:\\cinecup\\src\\auth.js",["170"],"import React, { useEffect } from 'react';\nimport { auth } from './action/user_actions';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport default function Auth(ComposedClass, status, admin = false) {\n  function AuthenticationCheck(props) {\n    let user = useSelector(state => state.user);\n    const dispatch = useDispatch();\n    useEffect(() => {\n      dispatch(auth()).then(async response => {\n        // response is true means user logged in\n        // logged in user can not see login and signup page\n        if (user.isLoggedIn && status === false) {\n          props.history.push('/');\n        }\n        // redirect to\n        if (user.isLoggedIn === false && status === true) {\n          props.history.push('/login');\n        }\n        // if user is not admin\n        else if (\n          user.isLoggedIn === true &&\n          admin === true &&\n          user.user.IsAdmin === false\n        ) {\n          props.history.push('/error');\n        }\n      });\n    }, [dispatch, props.history, user.isLoggedIn]);\n    return <ComposedClass {...props} />;\n  }\n  return AuthenticationCheck;\n}\n","F:\\cinecup\\src\\Components\\LoginPageComponent\\ResetPassword.js",["171"],"import React, { useState, useEffect } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\n\nimport Paper from '@material-ui/core/Paper';\n\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// redux\nimport { resetPassword } from '../../action/user_actions';\nimport { useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage:\n      'url(https://image.freepik.com/free-vector/login-concept-illustration_114360-739.jpg)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: 'contain',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nfunction ResetPassword() {\n  const classes = useStyles();\n\n  const [email, setemail] = useState('');\n\n  const [emailError, setemailError] = useState('');\n\n  const [altemail, setaltemail] = useState(false);\n\n  useEffect(() => {\n    if (\n      altemail &&\n      !/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n        email\n      )\n    )\n      setemailError('Invalid Email Address');\n    else setemailError('');\n  }, [altemail, email]);\n\n  const dispatch = useDispatch();\n\n  const RESETPASSWORD = e => {\n    e.preventDefault();\n    dispatch(resetPassword({ email: email }));\n  };\n  return (\n    <Grid container component='main' className='login-root'>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className='login-image' />\n      <Grid item xs={12} sm={8} md={5}>\n        <div className='login-paper'>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component='h1' variant='h5'>\n            Password Reset\n          </Typography>\n          <form className={classes.form} Validate>\n            <TextField\n              error={emailError}\n              helperText={emailError}\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              id='email'\n              label='Email Address'\n              name='email'\n              autoComplete='email'\n              autoFocus\n              value={email}\n              onChange={e => {\n                setemail(e.target.value);\n                setaltemail(true);\n              }}\n              InputProps={{ className: 'voting_text' }}\n              InputLabelProps={{\n                className: 'voting_text',\n              }}\n            />\n\n            <Button\n              type='submit'\n              fullWidth\n              variant='contained'\n              color='primary'\n              className={classes.submit}\n              onClick={RESETPASSWORD}\n            >\n              Reset\n            </Button>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default ResetPassword;\n","F:\\cinecup\\src\\Components\\SearchPageComponent\\SearchPageComponent.js",["172","173","174"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TMDB_API_KEY } from '../../key/key';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Search from './Search';\nimport Results from './Results';\nimport Popup from './Popup';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { setqueryString } from './../../action/movie_actions';\n\nfunction SearchPageComponent() {\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.user);\n  const [results, setresults] = useState([]);\n  const [selected, setselected] = useState({});\n  const [isLoading, setisLoading] = useState(true);\n  const [open, setOpen] = useState(false);\n  var apiurl = `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${user.queryString}`;\n\n  let nominations;\n  if (user.isLoggedIn) {\n    nominations = user.user.Nominations.length;\n  } else {\n    nominations = 10;\n  }\n\n  useEffect(() => {\n    if (user.error || nominations === 5 || user.successmsg) {\n      setOpen(true);\n    }\n  }, [user, nominations]);\n\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\n  }\n\n  const useSnackbarStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n    },\n  }));\n  const search = () => {\n    if (user.queryString) {\n      axios(apiurl).then(({ data }) => {\n        let results = data.results;\n        setresults(results);\n        setisLoading(false);\n      });\n    } else {\n      axios(\n        `https://api.themoviedb.org/3/trending/movie/week?api_key=${TMDB_API_KEY}`\n      ).then(({ data }) => {\n        let results = data.results;\n        setresults(results);\n        setisLoading(false);\n      });\n    }\n  };\n\n  const handleInput = e => {\n    setisLoading(true);\n    dispatch(setqueryString(e.target.value));\n  };\n\n  useEffect(() => {\n    search();\n  }, [user.queryString]);\n\n  const openPopup = id => {\n    axios(apiurl + '&i=' + id).then(({ data }) => {\n      let result = data;\n      setselected(result);\n    });\n  };\n\n  const closePopup = () => {\n    setselected({});\n  };\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  if (user.isLoading)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <div>\n      <header>\n        <h1>Movie Search</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search} />\n        {!isLoading ? (\n          <React.Fragment>\n            <Results results={results} />\n            {typeof selected.Title != 'undefined' ? (\n              <Popup selected={selected} closePopup={closePopup} />\n            ) : (\n              false\n            )}\n          </React.Fragment>\n        ) : (\n          <div className='wrapper'>\n            <Skeleton variant='rect' animation='wave' className='card_s' />\n            <Skeleton variant='rect' animation='wave' className='card_s' />\n            <Skeleton variant='rect' animation='wave' className='card_s' />\n            <Skeleton variant='rect' animation='wave' className='card_s' />\n            <Skeleton variant='rect' animation='wave' className='card_s' />\n            <Skeleton variant='rect' animation='wave' className='card_s' />\n          </div>\n        )}\n        {user.error ? (\n          <Snackbar open={open} autoHideDuration={10000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity='error'>\n              {`${user.error}`}\n            </Alert>\n          </Snackbar>\n        ) : user.successmsg ? (\n          <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity='success'>\n              {`${user.successmsg}`}\n            </Alert>\n          </Snackbar>\n        ) : (\n          <div></div>\n        )}\n        {nominations === 5 ? (\n          <Snackbar open={open} autoHideDuration={10000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity='error'>\n              You have already nominated 5 movies to add another remove one\n              first\n            </Alert>\n          </Snackbar>\n        ) : (\n          <div></div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default SearchPageComponent;\n","F:\\cinecup\\src\\Components\\ErrorPageComponent\\ErrorPageComponent.js",["175"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './ErrorPageStyle.css';\n\nfunction ErrorPageComponent() {\n  return (\n    <div className='errorcomp'>\n      <section className='wrapper'>\n        <div className='container'>\n          <div id='scene' className='scene' data-hover-only='false'>\n            <div className='circle' data-depth='1.2'></div>\n            <div className='one' data-depth='0.9'>\n              <div className='content'>\n                <span className='piece'></span>\n                <span className='piece'></span>\n                <span className='piece'></span>\n              </div>\n            </div>\n            <div className='two' data-depth='0.60'>\n              <div className='content'>\n                <span className='piece'></span>\n                <span className='piece'></span>\n                <span className='piece'></span>\n              </div>\n            </div>\n            <div className='three' data-depth='0.40'>\n              <div className='content'>\n                <span className='piece'></span>\n                <span className='piece'></span>\n                <span className='piece'></span>\n              </div>\n            </div>\n            <p className='p404' data-depth='0.50'>\n              404\n            </p>\n            <p className='p404' data-depth='0.10'>\n              404\n            </p>\n          </div>\n          <div className='text'>\n            <article>\n              <p>\n                Uh oh! Looks like you got lost. <br />\n                Go back to the homepage if you dare!\n              </p>\n              <button>\n                <Link to='/'>i dare!</Link>\n              </button>\n            </article>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default ErrorPageComponent;\n","F:\\cinecup\\src\\Components\\HomePageComponent\\HomePageComponent.js",["176","177","178"],"import React, { useState, useEffect } from 'react';\nimport './HomePageStyle.css';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { init } from 'ityped';\nimport { Link } from 'react-router-dom';\nimport TextTransition, { presets } from 'react-text-transition';\nimport ScrollToTop from '../scrollToTop';\nimport ScrollAnimation from 'react-animate-on-scroll';\nconst TEXTS = [\n  'Watch Trailers',\n  'Rate and Review Movies',\n  'Vote for Films',\n  'Share Movies',\n];\nconst COLORS = ['#2196f3', '#e040fb', '#43a047', '#f06292'];\n\nfunction HomePageComponent() {\n  const user = useSelector(state => state.user);\n  const [index, setIndex] = React.useState(0);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => setIndex(index => index + 1), 4000);\n  }, []);\n  useEffect(() => {\n    if (user.announcement) {\n      const myElement = document.querySelector('#myElement');\n      init(myElement, { showCursor: false, strings: user.announcement });\n    }\n  }, [user.announcement]);\n\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <>\n      <div className='wrapper_home'>\n        <div className='welcome_box'>\n          <Grid container>\n            <Grid item xs={12} md={5} className='welcome_text'>\n              <h2 style={{ textAlign: 'left' }}>\n                <span className='big2'>CineCup</span> Welcomes You to the Arena\n                Of Movies where You Can\n                <TextTransition\n                  text={TEXTS[index % TEXTS.length]}\n                  springConfig={presets.default}\n                  style={{ color: `${COLORS[index % COLORS.length]}` }}\n                  // direction=\"up\"\n                  className='big'\n                  delay={0}\n                />\n              </h2>\n            </Grid>\n            <Grid item xs={12} md={7} className='welcome_image'>\n              <img\n                src='https://templatemo.com/templates/templatemo_537_art_factory/assets/images/slider-icon.png'\n                className='wel_image'\n                alt='First Vector Graphic'\n              />\n            </Grid>\n          </Grid>\n        </div>\n        <ScrollAnimation animateIn='zoomIn' animateOut='zoomOut'>\n          <Grid container className='section'>\n            <Grid\n              item\n              xs={12}\n              md={6}\n              className='welcome_text'\n              style={{ padding: 10 }}\n            >\n              <h1 className='heading_h'>Announcements</h1>\n              <h3\n                className='text_home'\n                style={{\n                  textAlign: 'center',\n                  color: '#e91e63',\n                  fontSize: '1.3rem',\n                }}\n                id='type'\n              >\n                <div id='myElement'></div>\n              </h3>\n            </Grid>\n          </Grid>\n        </ScrollAnimation>\n        <ScrollAnimation animateIn='zoomIn' animateOut='zoomOut' delay={400}>\n          <Grid container className='section'>\n            <Grid item xs={12} md={6} className='welcome_image'>\n              <img\n                src='https://templatemo.com/templates/templatemo_537_art_factory/assets/images/left-image.png'\n                className='wel_image'\n                alt='First Vector Graphic'\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6} className='welcome_text'>\n              <h1 className='heading_h'>LeaderBoard</h1>\n              <p className='text_home'>\n                A place to look for the ranking of the movies in the current\n                contest. Your film not at the top ?? Do not worry you can search\n                for it and you will get its current rank and the no of votes it\n                has got till now. You do not need to refresh the leaderboard\n                it's updated in realtime.\n              </p>\n              <Link to='/leaderboard'>\n                <Button variant='outlined' color='secondary' small>\n                  Leaderboard\n                </Button>\n              </Link>\n            </Grid>\n          </Grid>\n        </ScrollAnimation>\n        <ScrollAnimation animateIn='zoomIn' delay={400} animateOut='zoomOut'>\n          <Grid container className='section section_even'>\n            <Grid item xs={12} md={6} className='imag'>\n              <img\n                src='https://templatemo.com/templates/templatemo_537_art_factory/assets/images/right-image.png'\n                className='wel_image'\n                alt='First Vector Graphic'\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6} className='welcome_text'>\n              <h1 className='heading_h'>Nomination</h1>\n              <p className='text_home'>\n                Here you can nominate your favourite movie for the award. Are\n                You a movie fanatic and love a lot of films?? No worries needed\n                you can select for 5 of your favourite movies, and do not forget\n                to share your movie with your friends and increase its chances\n                of winning the contest.\n              </p>\n              <Link to='/search'>\n                <Button variant='outlined' color='secondary' small>\n                  Nominate\n                </Button>\n              </Link>\n            </Grid>\n          </Grid>\n        </ScrollAnimation>\n        <ScrollAnimation animateIn='zoomIn' delay={400} animateOut='zoomOut'>\n          <Grid container className='section'>\n            <Grid item xs={12} md={6} className='imag'>\n              <img\n                src='https://lukaszadam.com/assets/downloads/javascript_illustration.svg'\n                className='wel_image'\n                alt='First Vector Graphic'\n              />\n            </Grid>\n            <Grid item xs={12} md={6} className='welcome_text'>\n              <h1 className='heading_h'>Ranking Algorithm</h1>\n              <p className='text_home'>\n                The movie with more votes will get a lower rank. But if two\n                movies will have the same no of votes in a running contest then\n                they will be ranked the same. If the two films will have the\n                same no of polls till the competition ends then they will be\n                given the ranks decided by the cinecup team.\n              </p>\n            </Grid>\n          </Grid>\n        </ScrollAnimation>\n      </div>\n\n      <ScrollToTop />\n    </>\n  );\n}\n\nexport default HomePageComponent;\n","F:\\cinecup\\src\\Components\\LoginPageComponent\\LoginPageComponent.js",["179","180","181","182","183","184","185"],"import React, { useState, useEffect } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Link } from 'react-router-dom';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFacebookF, faGoogle } from '@fortawesome/free-brands-svg-icons';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './LoginStyle.css';\n// redux\nimport {\n  loginwithfacebook,\n  loginwithgoogle,\n  login,\n} from '../../action/user_actions';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '80px',\n    marginBottom: '40px',\n    height: '80vh',\n  },\n\n  paper: {\n    margin: theme.spacing(8, 4),\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant='filled' {...props} />;\n}\n\nconst useSnackbarStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nfunction LoginPageComponent() {\n  const classes = useStyles();\n  const Snackbarclasses = useSnackbarStyles();\n\n  const user = useSelector(state => state.user);\n\n  const [open, setOpen] = React.useState(false);\n  const [email, setemail] = useState('');\n  const [password, setpassword] = useState('');\n  const [emailError, setemailError] = useState('');\n  const [passwordError, setpasswordError] = useState('');\n  const [altemail, setaltemail] = useState(false);\n  const [altpassword, setaltpassword] = useState(false);\n  const [disabledSubmit, setdisabledSubmit] = useState(true);\n\n  useEffect(() => {\n    if (user.error) {\n      setOpen(true);\n    }\n  }, [user.error]);\n\n  useEffect(() => {\n    if (\n      altemail &&\n      !/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n        email\n      )\n    )\n      setemailError('Invalid Email Address');\n    else setemailError('');\n  }, [altemail, email]);\n\n  useEffect(() => {\n    if (altpassword && password.length < 6)\n      setpasswordError('Password must have more than 5 characters');\n    else setpasswordError('');\n  }, [altpassword, password]);\n\n  useEffect(() => {\n    if (!emailError && !passwordError && email && password)\n      setdisabledSubmit(false);\n    else setdisabledSubmit(true);\n  }, [passwordError, emailError, email, password]);\n\n  const dispatch = useDispatch();\n\n  const Login = e => {\n    e.preventDefault();\n    dispatch(login({ email: email, password: password }));\n  };\n  const loginWithGoogle = e => {\n    e.preventDefault();\n    dispatch(loginwithgoogle());\n  };\n  const loginWithFaceBook = e => {\n    e.preventDefault();\n    dispatch(loginwithfacebook());\n  };\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  if (user.isLoading)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <Grid container component='main' className='login-root'>\n      {/* <CssBaseline /> */}\n      <Grid item xs={false} sm={4} md={7} className='login-image' />\n      <Grid item xs={12} sm={8} md={5}>\n        <div className='login-paper'>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component='h1' variant='h5'>\n            Sign in\n          </Typography>\n          <form className={classes.form} Validate>\n            <TextField\n              error={emailError}\n              helperText={emailError}\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              id='email'\n              label='Email Address'\n              name='email'\n              autoComplete='email'\n              autoFocus\n              value={email}\n              onChange={e => {\n                setemail(e.target.value);\n                setaltemail(true);\n              }}\n              InputProps={{ className: 'voting_text' }}\n              InputLabelProps={{\n                className: 'voting_text',\n              }}\n            />\n            <TextField\n              error={passwordError}\n              helperText={passwordError}\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              name='password'\n              label='Password'\n              type='password'\n              id='password'\n              autoComplete='current-password'\n              value={password}\n              onChange={e => {\n                setpassword(e.target.value);\n                setaltpassword(true);\n              }}\n              InputProps={{ className: 'voting_text' }}\n              InputLabelProps={{\n                className: 'voting_text',\n              }}\n            />\n            <Button\n              type='submit'\n              fullWidth\n              variant='contained'\n              color='primary'\n              className={classes.submit}\n              onClick={Login}\n              disabled={disabledSubmit}\n            >\n              Sign In\n            </Button>\n            {user.error ? (\n              <Snackbar\n                open={open}\n                autoHideDuration={10000}\n                onClose={handleClose}\n              >\n                <Alert onClose={handleClose} severity='error'>\n                  {`${user.error}`}\n                </Alert>\n              </Snackbar>\n            ) : (\n              <div></div>\n            )}\n            <Grid container>\n              <Grid item xs={12}>\n                <Link to='/resetpassword' variant='body2'>\n                  Forgot password?\n                </Link>\n              </Grid>\n              <Grid item xs={12}>\n                <Link to='/signup' variant='body2'>\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n            <Button\n              style={{ marginTop: '25px', marginBottom: '25px' }}\n              fullWidth\n              variant='contained'\n              color='secondary'\n              startIcon={<FontAwesomeIcon icon={faGoogle} />}\n              onClick={e => {\n                loginWithGoogle(e);\n              }}\n            >\n              Login with Google\n            </Button>\n            <Button\n              fullWidth\n              variant='contained'\n              color='primary'\n              startIcon={<FontAwesomeIcon icon={faFacebookF} />}\n              onClick={e => {\n                loginWithFaceBook(e);\n              }}\n            >\n              Login with Facebook\n            </Button>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default LoginPageComponent;\n","F:\\cinecup\\src\\Components\\HistoryDetailComponent\\HistoryDetailComponent.js",["186","187","188","189","190","191"],"import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { TMDB_API_KEY } from '../../key/key';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './HistoryDetailStyle.css';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ScrollToTop from '../scrollToTop';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n\nimport { faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useWindowSize } from '@react-hook/window-size';\nimport Confetti from 'confetti-react';\n\nconst Cards = () => {\n  init();\n  function init() {\n    if (document.querySelector('.cards_carousal')) {\n      let cards = document.querySelector('.cards_carousal');\n      cards.addEventListener('click', clicked, false);\n      document.querySelectorAll('.cards_carousal .card_co')[1].click();\n    }\n  }\n\n  function clicked(e) {\n    let card = e.target;\n    if (card.getAttribute('data-card')) {\n      rearrange(card.getAttribute('data-card'));\n    }\n  }\n\n  function rearrange(card) {\n    let cards = document.querySelectorAll('.cards_carousal .card_co');\n    for (let n = 0; n < cards.length; n++) {\n      cards[n].classList.remove('card--left');\n      cards[n].classList.remove('card--center');\n      cards[n].classList.remove('card--right');\n    }\n    cards[card].classList.add('card--center');\n    if (card == 0) {\n      cards[2].classList.add('card--left');\n      cards[1].classList.add('card--right');\n    }\n    if (card == 1) {\n      cards[0].classList.add('card--left');\n      cards[2].classList.add('card--right');\n    }\n    if (card == 2) {\n      cards[1].classList.add('card--left');\n      cards[0].classList.add('card--right');\n    }\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    alignSelf: 'center',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    margin: 0,\n    width: '60%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: '20%',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: 'white',\n  },\n  inputRoot: {\n    color: 'inherit',\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    color: 'white',\n\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '70%',\n    [theme.breakpoints.up('sm')]: {\n      width: '50ch',\n      '&:focus': {\n        width: '60ch',\n      },\n    },\n  },\n  paper: {\n    // padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    height: 200,\n\n    display: 'flex',\n    flexDirection: 'row',\n  },\n}));\n\nfunction RenderCard({ r }) {\n  let x = r.rank - 1;\n  return (\n    <>\n      <div className='card_co fill-blue' data-card={x}>\n        <div className='card__icon'>\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${r.poster_path}`}\n            alt='Cards Image'\n            className='card--image'\n          />\n        </div>\n        <div className='card__detail'>\n          <h1>\n            <span className='star'>\n              <FontAwesomeIcon\n                icon={faStar}\n                color='#FFD700'\n                size='2x'\n              ></FontAwesomeIcon>\n            </span>\n\n            <span className='ranky'>{r.rank}</span>\n          </h1>\n\n          <h1>{r.title}</h1>\n          <h1>Votes : {r.votes}</h1>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst HistoryDetailComponent = () => {\n  const user = useSelector(state => state.user);\n  const { contest_id } = useParams();\n  const [moviedetail, setmoviedetail] = useState([]);\n  const [contest, setcontest] = useState({});\n  const classes = useStyles();\n  const [width, height] = useWindowSize();\n\n  useEffect(() => {\n    if (user.history) {\n      for (let i = 0; i < user.history.length; i++) {\n        if (user.history[i].contestid === contest_id) {\n          setcontest(user.history[i]);\n          break;\n        }\n      }\n    }\n  }, [user.history, contest_id]);\n\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  useEffect(() => {\n    if (contest && contest.Movies)\n      fetchData().then(arr => {\n        setmoviedetail(arr);\n      });\n  }, [contest]);\n  useEffect(() => {\n    Cards();\n  });\n  async function fetchData() {\n    let arr = [];\n    for (let i = 0; i < contest.Movies.length; i++) {\n      let element = contest.Movies[i];\n      let res = await axios(\n        `https://api.themoviedb.org/3/movie/${element.movieId}?api_key=${TMDB_API_KEY}`\n      );\n      let x = res.data;\n      arr.push({ ...x, rank: element.rank, votes: element.votes });\n      if (i === contest.Movies.length - 1) return arr;\n    }\n  }\n\n  if (user.isLoading)\n    return (\n      <div className='wrapper3'>\n        <CircularProgress\n          style={{ marginTop: '25vw' }}\n          color='secondary'\n        ></CircularProgress>\n      </div>\n    );\n  return (\n    <div className='wrapper3'>\n      <div style={{ height: '100vh' }}>\n        <Confetti\n          width={width}\n          height={height}\n          style={{ zIndex: '10' }}\n          numberOfPieces={300}\n        />\n        <div className='head_det'>\n          <h1>Winners of {contest.Name}</h1>\n        </div>\n        {moviedetail.length !== 0 ? (\n          <div className='cards_carousal'>\n            {moviedetail.slice(0, 3).map(resul => (\n              <RenderCard key={resul.id} r={resul} />\n            ))}\n          </div>\n        ) : (\n          <CircularProgress\n            style={{ marginTop: '15vw' }}\n            color='secondary'\n          ></CircularProgress>\n        )}\n      </div>\n      <div className='wrapper_history1'>\n        <div className='list'>\n          <div className='list__header'>\n            <h1>Standings</h1>\n          </div>\n          <div className='list__body'>\n            <table className='list__table' id='list-table'>\n              <tr className='header_row'>\n                <th className='list__cell'>Rank</th>\n                <th className='list__cell'>Movie</th>\n                <th className='list__cell'>Genre</th>\n                <th className='list__cell'>Votes</th>\n                <th class='list__cell'>Explore</th>\n              </tr>\n\n              {moviedetail.length !== 0 ? (\n                moviedetail.map(resul => (\n                  <tr className='list__row'>\n                    <td className='list__cell'>\n                      <span className='list__value'>{resul.rank}</span>\n                    </td>\n                    <td className='list__cell'>\n                      <span className='list__value'>{resul.title}</span>\n                    </td>\n                    <td className='list__cell'>\n                      {resul.genres.slice(0, 1).map(genre => {\n                        return <span> {genre.name} </span>;\n                      })}\n                    </td>\n\n                    <td className='list__cell'>\n                      <span className='list__value'>{resul.votes}</span>\n                    </td>\n                    <td className='list__cell'>\n                      <Link to={`/movie/${resul.id}`}>\n                        <span class='list__value'>\n                          <FontAwesomeIcon icon={faArrowCircleRight} />\n                        </span>\n                      </Link>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <p style={{ color: 'white' }}> Nothing Here </p>\n              )}\n            </table>\n          </div>\n        </div>\n      </div>\n      <ScrollToTop />\n    </div>\n  );\n};\n\nexport default HistoryDetailComponent;\n","F:\\cinecup\\src\\Components\\MoviePageComponent\\MoviePageComponent.js",["192","193","194","195","196","197","198","199","200"],"import { React, useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams, Link } from 'react-router-dom';\nimport { TMDB_API_KEY } from '../../key/key';\nimport axios from 'axios';\nimport './MoviePageStyle.css';\nimport ShareButton from '../shareButton';\nimport Anime, { anime } from 'react-anime';\nimport Rating from '@material-ui/lab/Rating';\nimport firebase from 'firebase';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport ScrollToTop from '../scrollToTop';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css'; // requires a loader\nimport { Carousel, props } from 'react-responsive-carousel';\n\nconst MoviePageComponent = () => {\n  const user = useSelector(state => state.user);\n  const [result, setresult] = useState({});\n  const [trailerurl, settrailerurl] = useState([]);\n  const { movie_id } = useParams();\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [newReview, setnewReview] = useState('');\n  const [newRating, setnewRating] = useState(0);\n  const [alreadyReviewed, setalreadyReviewed] = useState(false);\n  const customRenderItem = (item, props) => (\n    <item.type {...item.props} {...props} />\n  );\n  async function getUserDetails(obj) {\n    let querySnapshot = obj.docs;\n    const db = firebase.firestore();\n    let arr = [];\n    for (let i = 0; i < querySnapshot.length; i++) {\n      let doc = querySnapshot[i];\n      if (user.isLoggedIn && doc.data().uid === user.user.Email)\n        setalreadyReviewed(true);\n      var docRef = db.doc(`users/${doc.data().uid}`);\n      let userdoc = await docRef.get();\n      if (userdoc.exists) {\n        arr.push({ ...userdoc.data(), ...doc.data() });\n      } else {\n      }\n    }\n    return arr;\n  }\n  // Fetch Review\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection('reviews')\n      .where('mid', '==', movie_id)\n      .get()\n      .then(async function (querySnapshot) {\n        let arr = [];\n        arr = await getUserDetails(querySnapshot);\n        setReviews(arr);\n      })\n      .catch(function (error) {});\n  }, [user.isLoggedIn]);\n  // Write Review\n  const postReview = e => {\n    e.preventDefault();\n    const db = firebase.firestore();\n    db.collection('reviews')\n      .add({\n        mid: movie_id,\n        uid: user.user.Email,\n        rating: newRating,\n        review: newReview,\n      })\n      .then(function (docRef) {\n        setReviews([\n          ...reviews,\n          {\n            mid: movie_id,\n            uid: user.user.Email,\n            rating: newRating,\n            review: newReview,\n            Email: user.user.Email,\n            ProfilePic: user.user.ProfilePic,\n            Name: user.user.Name,\n          },\n        ]);\n        setalreadyReviewed(true);\n      })\n      .catch(function (error) {\n        console.error('Error adding document: ', error);\n      });\n  };\n\n  let User;\n  if (user.isLoggedIn) {\n    User = user.user;\n  } else {\n    User = null;\n  }\n\n  var creditsapi = `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${TMDB_API_KEY}`;\n\n  useEffect(() => {\n    axios(creditsapi).then(({ data }) => {\n      if (data && data.cast && data.cast.length) {\n        setCast(data.cast);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n  var apiurl = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${TMDB_API_KEY}`;\n  useEffect(() => {\n    axios(apiurl).then(res => {\n      setresult(res.data);\n    });\n  }, [apiurl]);\n  var trailerapi = `https://api.themoviedb.org/3/movie/${movie_id}/videos?api_key=${TMDB_API_KEY}`;\n  useEffect(() => {\n    axios(trailerapi).then(({ data }) => {\n      if (data && data.results && data.results.length) {\n        let arr = [];\n        data.results.forEach(element => {\n          arr.push(element.key);\n        });\n        settrailerurl([...arr]);\n      }\n    });\n  }, [trailerapi]);\n  const opts = {\n    playerVars: {\n      autoplay: 0,\n    },\n  };\n  if (user.isLoading)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <div>\n      <div className='main1'>\n        <div className='image'>\n          <img\n            src={`https://image.tmdb.org/t/p/original/${result.backdrop_path}`}\n          />\n          <div className='overlay'>\n            <Anime\n              easing='easeOutElastic'\n              duration={1000}\n              direction='alternate'\n              loop={true}\n              delay={(el, index) => index * 240}\n              translateX={[-50, 20]}\n              scale={[0.75, 0.9]}\n            >\n              <h1>{result.title}</h1>\n              <h4>\n                {result.runtime} min | {result.release_date}\n              </h4>\n            </Anime>\n            {/* <h4>{result.genres[0].name}</h4> */}\n\n            <div className='share_but_m'>\n              <ShareButton\n                url={`https://cinecup-9b0ac.web.app/movie/${result.id}`}\n                image={`https://image.tmdb.org/t/p/w500/${result.backdrop_path}`}\n                title={`${result.title} - ${result.overview} \n            Check out the trailer on this page`}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='afterImage'>\n          <div className='left1'>\n            <h3>Description</h3>\n            <p>{result.overview} </p>\n          </div>\n          <div className='right1'>\n            <Carousel\n              renderItem={customRenderItem}\n              infiniteLoop={true}\n              swipeable={true}\n              stopOnHover={true}\n              showArrows={true}\n              showStatus={false}\n              showIndicators={true}\n              showThumbs={false}\n              useKeyboardArrows={true}\n              transitionTime={150}\n              swipeScrollTolerance={5}\n            >\n              {trailerurl.map(element => {\n                return (\n                  <YouTube videoId={element} className='trail' opts={opts} />\n                );\n              })}\n            </Carousel>\n          </div>\n          <div className='cast_wrapper'>\n            <h1 className='reviews_header'>CAST</h1>\n            <div className='cast_data'>\n              {cast.slice(0, 5).map(x => {\n                return (\n                  <div className='cast_1'>\n                    <img\n                      src={`https://image.tmdb.org/t/p/original/${x.profile_path}`}\n                      className='cast_image'\n                    />\n                    <span>{x.name}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          {user.isLoggedIn && !alreadyReviewed ? (\n            <div className='reviews_wrapper'>\n              <div class='supaviews'>\n                <div class='supaviews__add'>\n                  <div class='supaview'>\n                    <h1 class='supaview__title'>Add a new review</h1>\n                    <form id='review'>\n                      <div className='user_data'>\n                        <img src={User.ProfilePic} className='avatar' />\n                        <span>{User.Name}</span>\n                      </div>\n                      <Rating\n                        precision='0.5'\n                        value={newRating}\n                        onChange={e => setnewRating(e.target.value)}\n                      />\n                      <div class='supaview__copy'>\n                        <textarea\n                          name='message'\n                          placeholder='Review'\n                          rows='5'\n                          value={newReview}\n                          onChange={e => setnewReview(e.target.value)}\n                        ></textarea>\n                      </div>\n                      <button\n                        class='supaview__submit'\n                        onClick={e => postReview(e)}\n                      >\n                        Submit review\n                      </button>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div></div>\n          )}\n          <div className='reviews_wrapper'>\n            <h1 className='reviews_header'>REVIEWS</h1>\n            <div class='container'>\n              <div class='reviews'>\n                {reviews && reviews.length != 0 ? (\n                  reviews.map(x => {\n                    return (\n                      <div class='review-item'>\n                        <Link to={`/user/${x.Email}`}>\n                          <div className='reviewer'>\n                            <img\n                              src={x.ProfilePic}\n                              class='user_im'\n                              alt='Customer Feedback'\n                            />\n                            <div claas='cius'>\n                              <h3 class='customer-name'>{x.Name}</h3>\n                              <Rating\n                                precision='0.5'\n                                value={x.rating}\n                                readOnly\n                              />\n                            </div>\n                          </div>\n                        </Link>\n\n                        <p>{x.review}</p>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <h2 className='text_re'>No reviews found</h2>\n                )}\n              </div>\n            </div>\n          </div>\n          <ScrollToTop />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MoviePageComponent;\n","F:\\cinecup\\src\\Components\\LeaderboardPageComponent\\LeaderboardPageComponent.js",["201","202","203","204","205"],"import React, { useEffect } from 'react';\nimport './LeaderboardStyles.css';\nimport { Link } from 'react-router-dom';\nimport Img2 from '../../icons/Asset 1@2x.png';\nimport { useSelector } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport ScrollToTop from '../scrollToTop';\nimport ShareButton from '../shareButton';\nimport { faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Hidden } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    alignSelf: 'center',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    margin: 0,\n    width: '100%',\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: 'white',\n  },\n  inputRoot: {\n    color: 'inherit',\n    backgroundColor: fade(theme.palette.common.black, 0.45),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.black, 0.55),\n    },\n    width: '100%',\n  },\n  inputInput: {\n    color: 'white',\n\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    maxWidth: 600,\n  },\n  paper: {\n    // padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    height: 200,\n\n    display: 'flex',\n    flexDirection: 'row',\n  },\n}));\nconst LeaderboardPageComponent = () => {\n  const classes = useStyles();\n  const user = useSelector(state => state.user);\n\n  let result = user.movies ? user.movies : [];\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  if (user.isLoading)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <div className='wrapper2'>\n      <div className='wrapper_history'>\n        <div className='list'>\n          <div className='list__header'>\n            <h1>Leaderboard</h1>\n            {result.length !== 0 && (\n              <InputBase\n                placeholder='Search…'\n                className='searchbox'\n                inputProps={{ 'aria-label': 'search', id: 'sear' }}\n                onChange={() => {\n                  var all = document\n                    .getElementById('list-table')\n                    .getElementsByClassName('list__row');\n\n                  for (var i = 0; i < all.length; i++) {\n                    var txtValue = all[i].innerText;\n                    if (\n                      txtValue\n                        .toLowerCase()\n                        .trim()\n                        .includes(\n                          document\n                            .getElementById('sear')\n                            .value.toLowerCase()\n                            .trim()\n                        )\n                    ) {\n                      all[i].style.display = '';\n                    } else {\n                      all[i].style.display = 'none';\n                    }\n                  }\n                }}\n              />\n            )}\n          </div>\n          {result.length !== 0 ? (\n            <div className='list__body'>\n              <table className='list__table' id='list-table'>\n                <tr className='header_row'>\n                  <th className='list__cell'>Rank</th>\n                  <th className='list__cell'>Movie</th>\n\n                  <th className='list__cell'>Votes</th>\n                  <th class='list__cell'>Explore</th>\n                </tr>\n\n                {result.map(resul => (\n                  <tr className='list__row'>\n                    <td className='list__cell'>\n                      <span className='list__value'>{resul.rank}</span>\n                    </td>\n                    <td className='list__cell'>\n                      <span className='list__value'>{resul.title}</span>\n                    </td>\n\n                    <td className='list__cell'>\n                      <span className='list__value'>{resul.votes}</span>\n                    </td>\n                    <td className='list__cell'>\n                      <Link to={`/movie/${resul.id}`}>\n                        <span class='list__value'>\n                          <FontAwesomeIcon icon={faArrowCircleRight} />\n                        </span>\n                      </Link>\n                    </td>\n                  </tr>\n                ))}\n              </table>\n            </div>\n          ) : user.isVoting ? (\n            <div className='results'>\n              <img src={Img2} className='noresults' />\n              <h3>No movie here</h3>\n            </div>\n          ) : (\n            <div className='results'>\n              <img src={Img2} className='noresults' />\n              <h3>No Ongoing contest</h3>\n            </div>\n          )}\n        </div>\n      </div>\n      <ScrollToTop />\n    </div>\n  );\n};\n\nexport default LeaderboardPageComponent;\n","F:\\cinecup\\src\\Components\\DashboardPageComponent\\DashboardPageComponent.js",["206","207","208","209","210","211","212","213","214","215"],"import React, { useState, useEffect } from 'react';\nimport './DashboardStyle.css';\nimport ScrollToTop from '../scrollToTop';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { remove_nominate } from '../../action/user_actions';\nimport { TMDB_API_KEY } from '../../key/key';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\nimport Img2 from '../../icons/Asset 1@2x.png';\nimport { Link } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Rating from '@material-ui/lab/Rating';\nimport ShareButton from '../shareButton';\nimport firebase from 'firebase';\nimport Swal from 'sweetalert2';\nimport Grid from '@material-ui/core/Grid';\nfunction DashboardPageComponent() {\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 345,\n    },\n    media: {\n      height: 140,\n    },\n  });\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.user);\n  const [result, setresult] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [reviewDetail, setreviewDetail] = useState([]);\n\n  async function getMovieDetails(obj) {\n    let querySnapshot = obj.docs;\n    let arr = [];\n    for (let i = 0; i < querySnapshot.length; i++) {\n      let doc = querySnapshot[i];\n      try {\n        let res = await axios.get(\n          `https://api.themoviedb.org/3/movie/${\n            doc.data().mid\n          }?api_key=${TMDB_API_KEY}`\n        );\n        arr.push({\n          ...res.data,\n          review: doc.data().review,\n          rating: doc.data().rating,\n          reviewID: doc.id,\n        });\n      } catch (err) {}\n    }\n    return arr;\n  }\n  useEffect(() => {\n    if (user.user && user.user.Email) {\n      const db = firebase.firestore();\n      db.collection('reviews')\n        .where('uid', '==', user.user.Email)\n        .get()\n        .then(async function (querySnapshot) {\n          let arr = [];\n          arr = await getMovieDetails(querySnapshot);\n          setreviewDetail(arr);\n        })\n        .catch(function (error) {});\n    }\n  }, [user.isLoggedIn]);\n\n  const deleteReview = async (e, x) => {\n    e.preventDefault();\n    const db = firebase.firestore();\n    let arr = reviewDetail.filter(element => element !== x);\n    db.collection('reviews')\n      .doc(x.reviewID)\n      .delete()\n      .then(function () {\n        setreviewDetail(arr);\n      })\n      .catch(function (error) {\n        console.error('Error removing document: ', error);\n      });\n  };\n  // ================================= EDIT Review ====================================\n  async function editReview(x, newreview, newrating) {\n    const db = firebase.firestore();\n    let arr = reviewDetail.map(element => {\n      if (element === x)\n        return { ...element, review: newreview, rating: newrating };\n      return element;\n    });\n    try {\n      let response = await db\n        .collection('reviews')\n        .doc(x.reviewID)\n        .update({ review: newreview, rating: newrating });\n      setreviewDetail(arr);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n  const EditReviewAlert = async (e, x) => {\n    e.preventDefault();\n    Swal.mixin({\n      input: 'text',\n      confirmButtonText: 'Next &rarr;',\n      showCancelButton: true,\n      progressSteps: ['1', '2'],\n    })\n      .queue([\n        {\n          title: 'Edit Your Rating',\n          input: 'range',\n          inputLabel: 'New Rating',\n          inputAttributes: {\n            min: 0.5,\n            max: 5,\n            step: 0.5,\n          },\n          inputValue: 2.5,\n        },\n        {\n          title: 'Edit Your Review',\n          input: 'textarea',\n          inputLabel: 'New Review',\n          inputValue: x.review,\n          inputPlaceholder: 'Type your message here...',\n          inputAttributes: {\n            'aria-label': 'Type your message here',\n          },\n          showCancelButton: true,\n        },\n      ])\n      .then(async result => {\n        if (result.value) {\n          let res = await editReview(x, result.value[1], result.value[0]);\n          if (res) {\n            Swal.fire({\n              icon: 'success',\n              title: 'Review Updated Successfully',\n              confirmButtonText: 'OK',\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Some Error Occured',\n              confirmButtonText: 'OK',\n            });\n          }\n        }\n      });\n  };\n  let nominations;\n  if (user.isLoggedIn) {\n    nominations = user.user.Nominations.length;\n  } else {\n    nominations = 10;\n  }\n\n  useEffect(() => {\n    if (user.error || nominations === 5 || user.successmsg) {\n      setOpen(true);\n    }\n  }, [user, nominations]);\n\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\n  }\n\n  const useSnackbarStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n    },\n  }));\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  //======================================Fetching data from internet ===========================\n  async function fetchData() {\n    let arr = [];\n    for (let i = 0; i < user.user.Nominations.length; i++) {\n      let element = user.user.Nominations[i];\n      let res = await axios(\n        `https://api.themoviedb.org/3/movie/${element}?api_key=${TMDB_API_KEY}`\n      );\n      let x = res.data;\n      arr.push(x);\n      if (i === user.user.Nominations.length - 1) return arr;\n    }\n  }\n  //=========================================== Render Card =========================================\n\n  function RenderCard({ r }) {\n    const Remove_Nominate = e => {\n      e.preventDefault();\n      const dataToSubmit = {\n        Email: user.user.Email,\n        movieId: r.id,\n      };\n      dispatch(remove_nominate(dataToSubmit));\n      let array = result;\n      let cardIndex = array.indexOf(r);\n      if (cardIndex !== -1) {\n        array.splice(cardIndex, 1);\n        setresult(array);\n      }\n    };\n\n    return (\n      <div className='card_s'>\n        <div\n          className='front_s'\n          style={{\n            backgroundImage:\n              'url(' + `https://image.tmdb.org/t/p/w500/${r.poster_path}` + ')',\n          }}\n        ></div>\n        <div className='back_s'>\n          <div style={{ display: 'flex', flexDirection: 'column ' }}>\n            <div>\n              <h2>{r.title}</h2>\n              <h3>{r.release_date}</h3>\n              <Rating\n                precision='0.5'\n                name='read-only'\n                value={r.vote_average / 2}\n                readOnly\n              />\n            </div>\n\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                textAlign: 'center',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <Link to={`/movie/${r.id}`}>\n                <Button\n                  className='button_s'\n                  variant='outlined'\n                  color='secondary'\n                  style={{ marginBottom: 10 }}\n                >\n                  Explore\n                </Button>\n              </Link>\n              <Button\n                className='button_s'\n                style={{ marginBottom: 10 }}\n                variant='outlined'\n                color='primary'\n                onClick={e => {\n                  Remove_Nominate(e);\n                }}\n              >\n                Remove\n              </Button>\n              <div className='share_but_s'>\n                <ShareButton\n                  url={`https://cinecup-9b0ac.web.app/movie/${r.id}`}\n                  image={`https://image.tmdb.org/t/p/w500/${r.poster_path}`}\n                  title={`${r.title} - ${r.overview} \n            Check out the trailer on this page`}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n  // ===================================================================================================\n  useEffect(() => {\n    if (user.isLoggedIn) {\n      if (user.user && user.user.Nominations)\n        fetchData().then(arr => {\n          setresult(arr);\n        });\n    }\n  }, [user.isLoggedIn]);\n\n  // Main Return from this component\n  if (user.isLoading || !user.isLoggedIn)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <React.Fragment>\n      <div style={{ marginTop: 100 }}>\n        <h1>Your Nominations</h1>\n      </div>\n      <main>\n        <section className='wrapper1'>\n          {result && result.length !== 0 ? (\n            result.map(resul => <RenderCard key={resul.id} r={resul} />)\n          ) : (\n            <div className='results'>\n              <img src={Img2} className='noresults' />\n              <h3>No Movies Nominated</h3>\n            </div>\n          )}\n        </section>\n        {user.error ? (\n          <Snackbar open={open} autoHideDuration={10000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity='error'>\n              {`${user.error}`}\n            </Alert>\n          </Snackbar>\n        ) : user.successmsg ? (\n          <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity='success'>\n              {`${user.successmsg}`}\n            </Alert>\n          </Snackbar>\n        ) : (\n          <div></div>\n        )}\n        <div className='users_reviews'>\n          <h1>Reviews</h1>\n\n          {reviewDetail.length ? (\n            reviewDetail.map(x => {\n              return (\n                <Grid container spacing={1} className='user_reviewed'>\n                  <Grid item xs={12} md={3}>\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500${x.poster_path}`}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} md={6} className='reviewed'>\n                    <h2>{x.title}</h2>\n                    <Rating precision='0.5' value={x.rating} readOnly />\n                    <h3 className='user_review1'>\"{x.review}\"</h3>\n                  </Grid>\n                  <Grid item xs={12} md={3}>\n                    <Button\n                      variant='outlined'\n                      color='primary'\n                      onClick={e => {\n                        EditReviewAlert(e, x);\n                      }}\n                      style={{ margin: 10 }}\n                    >\n                      Edit\n                    </Button>\n                    <Button\n                      variant='outlined'\n                      color='secondary'\n                      onClick={e => {\n                        deleteReview(e, x);\n                      }}\n                      style={{ margin: 10 }}\n                    >\n                      Remove\n                    </Button>\n                  </Grid>\n                </Grid>\n              );\n            })\n          ) : (\n            <div className='results'>\n              <img src={Img2} className='noresults' />\n              <h3>No movie reviewed yet.</h3>\n            </div>\n          )}\n        </div>\n      </main>\n      <ScrollToTop />\n    </React.Fragment>\n  );\n}\n\nexport default DashboardPageComponent;\n","F:\\cinecup\\src\\Components\\SignUpPageComponent\\SignUpPageComponent.js",["216","217"],"import React, { useState, useEffect } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { register } from '../../action/user_actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faImage } from '@fortawesome/free-solid-svg-icons';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: '80px',\n    height: '80vh',\n    backgroundColor: 'rgb(0, 18, 34)',\n  },\n  image: {\n    backgroundImage:\n      'url(https://image.freepik.com/free-vector/account-concept-illustration_114360-399.jpg)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: 'contain',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(1),\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '80%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst useSnackbarStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nfunction SignUpPageComponent() {\n  const classes = useStyles();\n\n  const user = useSelector(state => state.user);\n\n  const [open, setOpen] = React.useState(false);\n\n  const [firstname, setfirstname] = useState('');\n  const [lastname, setlastname] = useState('');\n  const [email, setemail] = useState('');\n  const [profilepic, setprofilepic] = useState(null);\n  const [password, setpassword] = useState('');\n  const [firstnameError, setfirstnameError] = useState('');\n  const [lastnameError, setlastnameError] = useState('');\n  const [emailError, setemailError] = useState('');\n  const [passwordError, setpasswordError] = useState('');\n  const [altfirstname, setaltfirstname] = useState(false);\n  const [altlastname, setaltlastname] = useState(false);\n  const [altemail, setaltemail] = useState(false);\n  const [altpassword, setaltpassword] = useState(false);\n  const [disabledSubmit, setdisabledSubmit] = useState(true);\n\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\n  }\n\n  useEffect(() => {\n    if (user.error || user.successmsg) {\n      setOpen(true);\n    }\n  }, [user]);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    if (altfirstname && firstname.length < 3)\n      setfirstnameError('Firstname must be more than 2 characters');\n    else setfirstnameError('');\n  }, [altfirstname, firstname]);\n\n  useEffect(() => {\n    if (altlastname && lastname.length < 3)\n      setlastnameError('Lastname must be more than 2 characters');\n    else setlastnameError('');\n  }, [altlastname, lastname]);\n\n  useEffect(() => {\n    if (\n      altemail &&\n      !/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n        email\n      )\n    )\n      setemailError('Invalid Email Address');\n    else setemailError('');\n  }, [altemail, email]);\n\n  useEffect(() => {\n    if (altpassword && password.length < 6)\n      setpasswordError('Password must have more than 5 characters');\n    else setpasswordError('');\n  }, [altpassword, password]);\n\n  useEffect(() => {\n    if (\n      !firstnameError &&\n      !lastnameError &&\n      !emailError &&\n      !passwordError &&\n      firstname &&\n      lastname &&\n      email &&\n      password\n    )\n      setdisabledSubmit(false);\n    else setdisabledSubmit(true);\n  }, [\n    firstnameError,\n    lastnameError,\n    passwordError,\n    emailError,\n    firstname,\n    lastname,\n    email,\n    password,\n  ]);\n\n  const handleChange = e => {\n    if (e.target.files[0]) {\n      setprofilepic(e.target.files[0]);\n    }\n  };\n\n  // redux\n  const dispatch = useDispatch();\n  const signUp = e => {\n    e.preventDefault();\n    const dataToSubmit = {\n      firstname,\n      lastname,\n      email,\n      password,\n      profilepic,\n    };\n    dispatch(register(dataToSubmit));\n  };\n\n  if (user.isLoading)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <Grid container component='main' className='login-root'>\n      <Grid item xs={false} sm={4} md={6} className='signup-image' />\n      <Grid item xs={12} sm={8} md={6}>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component='h1' variant='h5'>\n            Sign up\n          </Typography>\n          <form className={classes.form} Validate>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  error={firstnameError}\n                  helperText={firstnameError}\n                  autoComplete='fname'\n                  name='firstName'\n                  variant='outlined'\n                  required\n                  fullWidth\n                  id='firstName'\n                  label='First Name'\n                  value={firstname}\n                  onChange={e => {\n                    setfirstname(e.target.value);\n                    setaltfirstname(true);\n                  }}\n                  autoFocus\n                  InputProps={{ className: 'voting_text' }}\n                  InputLabelProps={{\n                    className: 'voting_text',\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  error={lastnameError}\n                  helperText={lastnameError}\n                  variant='outlined'\n                  required\n                  fullWidth\n                  id='lastName'\n                  label='Last Name'\n                  name='lastName'\n                  autoComplete='lname'\n                  value={lastname}\n                  onChange={e => {\n                    setlastname(e.target.value);\n                    setaltlastname(true);\n                  }}\n                  InputProps={{ className: 'voting_text' }}\n                  InputLabelProps={{\n                    className: 'voting_text',\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  error={emailError}\n                  helperText={emailError}\n                  variant='outlined'\n                  required\n                  fullWidth\n                  id='email'\n                  label='Email Address'\n                  name='email'\n                  autoComplete='email'\n                  value={email}\n                  onChange={e => {\n                    setemail(e.target.value);\n                    setaltemail(true);\n                  }}\n                  InputProps={{ className: 'voting_text' }}\n                  InputLabelProps={{\n                    className: 'voting_text',\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  error={passwordError}\n                  helperText={passwordError}\n                  variant='outlined'\n                  required\n                  fullWidth\n                  name='password'\n                  label='Password'\n                  type='password'\n                  id='password'\n                  autoComplete='current-password'\n                  value={password}\n                  onChange={e => {\n                    setpassword(e.target.value);\n                    setaltpassword(true);\n                  }}\n                  InputProps={{ className: 'voting_text' }}\n                  InputLabelProps={{\n                    className: 'voting_text',\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <div class='image-input'>\n                  <input\n                    type='file'\n                    onChange={e => {\n                      handleChange(e);\n                    }}\n                    id='imageInput'\n                  />\n                  <label for='imageInput' class='image-button'>\n                    {' '}\n                    <FontAwesomeIcon icon={faImage} /> Choose image\n                  </label>\n                  <span class='change-image'>Choose different image</span>\n                </div>\n              </Grid>\n            </Grid>\n            <Button\n              type='submit'\n              fullWidth\n              variant='contained'\n              color='primary'\n              className={classes.submit}\n              onClick={signUp}\n              disabled={disabledSubmit}\n            >\n              Sign Up\n            </Button>\n            {user.error ? (\n              <Snackbar\n                open={open}\n                autoHideDuration={10000}\n                onClose={handleClose}\n              >\n                <Alert onClose={handleClose} severity='error'>\n                  {`${user.error}`}\n                </Alert>\n              </Snackbar>\n            ) : user.successmsg ? (\n              <Snackbar\n                open={open}\n                autoHideDuration={10000}\n                onClose={handleClose}\n              >\n                <Alert onClose={handleClose} severity='success'>\n                  {`${user.successmsg}`}\n                </Alert>\n              </Snackbar>\n            ) : (\n              <div></div>\n            )}\n            <Grid container justify='flex-end'>\n              <Grid item xs={12}>\n                <Link to='/login' variant='body2'>\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default SignUpPageComponent;\n","F:\\cinecup\\src\\Components\\AdminDashboardComponent\\AdminDashboardComponent.js",["218","219","220","221","222","223","224","225","226","227","228","229"],"import React, { useState, useEffect } from 'react';\nimport './AdminDashboardStyle.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TMDB_API_KEY } from '../../key/key';\nimport axios from 'axios';\nimport {\n  removeBlacklistedMovie,\n  startVoting,\n  stopVoting,\n  removeAnnouncement,\n  addAnnouncement,\n} from '../../action/movie_actions';\nimport { Button } from '@material-ui/core';\nimport LocalMoviesIcon from '@material-ui/icons/LocalMovies';\nimport { Link } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport firebase from 'firebase';\nimport Rating from '@material-ui/lab/Rating';\nimport TextField from '@material-ui/core/TextField';\nimport ShareButton from '../shareButton';\nimport swal from 'sweetalert';\nimport Grid from '@material-ui/core/Grid';\nimport InputBase from '@material-ui/core/InputBase';\nimport Img2 from '../../icons/Asset 1@2x.png';\nimport ScrollToTop from '../scrollToTop';\nimport { Hidden } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  disabledButton: {\n    backgroundColor: 'red',\n  },\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    alignSelf: 'center',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    margin: 0,\n    width: '100%',\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: 'white',\n  },\n  inputRoot: {\n    color: 'inherit',\n    backgroundColor: '#ffffff',\n    alignSelf: 'center',\n    width: '80%',\n    borderRadius: 5,\n  },\n  inputInput: {\n    color: 'black',\n\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    maxWidth: 600,\n  },\n  paper: {\n    // padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    height: 200,\n\n    display: 'flex',\n    flexDirection: 'row',\n  },\n}));\n\nconst AdminDashboardComponent = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.user);\n  const [result, setresult] = useState([]);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    if (user.error || user.successmsg) {\n      setOpen(true);\n    }\n  }, [user, user.blacklist]);\n\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n  // ======================================= ui ================================\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\n  }\n  const useSnackbarStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n    },\n  }));\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  //======================================Fetching data from internet ===========================\n\n  async function fetchData() {\n    let arr = [];\n    for (let i = 0; i < user.blacklist.length; i++) {\n      let element = user.blacklist[i];\n      let res = await axios(\n        `https://api.themoviedb.org/3/movie/${element}?api_key=${TMDB_API_KEY}`\n      );\n      let x = res.data;\n      arr.push(x);\n      if (i === user.blacklist.length - 1) return arr;\n    }\n  }\n  //=========================================== Render Card =========================================\n\n  function RenderCard({ r }) {\n    const RemoveFromBlackList = e => {\n      e.preventDefault();\n      const dataToSubmit = {\n        movieId: r.id,\n      };\n      dispatch(removeBlacklistedMovie(dataToSubmit));\n      let array = result;\n      let cardIndex = array.indexOf(r);\n      if (cardIndex !== -1) {\n        array.splice(cardIndex, 1);\n        setresult(array);\n      }\n    };\n\n    return (\n      <div className='card_s'>\n        <div\n          className='front_s'\n          style={{\n            backgroundImage:\n              'url(' + `https://image.tmdb.org/t/p/w500/${r.poster_path}` + ')',\n          }}\n        ></div>\n        <div className='back_s'>\n          <div style={{ display: 'flex', flexDirection: 'column ' }}>\n            <div>\n              <h2>{r.title}</h2>\n              <h3>{r.release_date}</h3>\n              <Rating\n                precision='0.5'\n                name='read-only'\n                value={r.vote_average / 2}\n                readOnly\n              />\n            </div>\n\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                textAlign: 'center',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <Link to={`/movie/${r.id}`}>\n                <Button\n                  className='button_s'\n                  variant='outlined'\n                  color='secondary'\n                  style={{ marginBottom: 10 }}\n                >\n                  Explore\n                </Button>\n              </Link>\n              <Button\n                className='button_s'\n                style={{ marginBottom: 10 }}\n                variant='outlined'\n                color='primary'\n                onClick={e => {\n                  RemoveFromBlackList(e);\n                }}\n              >\n                Remove\n              </Button>\n              <div className='share_but_s'>\n                <ShareButton\n                  url={`https://cinecup-9b0ac.web.app/movie/${result.id}`}\n                  image={`https://image.tmdb.org/t/p/w500/${result.poster_path}`}\n                  title={`${result.title} - ${result.overview} \n            Check out the trailer on this page`}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  // ===================================================================================================\n  useEffect(() => {\n    if (user.isLoggedIn && user.blacklist) {\n      fetchData().then(arr => {\n        setresult(arr);\n      });\n    }\n  }, [user.isLoggedIn]);\n\n  // ======================== Fetching other users =================================\n  const [allusers, setallusers] = useState([]);\n  const [alladmin, setalladmin] = useState([]);\n  useEffect(() => {\n    const db = firebase.firestore();\n    let unsubscribe = db\n      .collection('users')\n      .onSnapshot(function (querySnapshot) {\n        let arr = [];\n        let arr1 = [];\n        querySnapshot.forEach(doc => {\n          if (doc.data().IsAdmin) arr1.push(doc.data());\n          else arr.push(doc.data());\n        });\n        setallusers(arr);\n        setalladmin(arr1);\n      });\n  }, []);\n\n  function makeAdminAlert(name, emailid, e) {\n    e.preventDefault();\n    swal({\n      title: 'Are you sure ?',\n      text: `${name} (${emailid}) will become an admin and, he/she will have the rights to remove you from admin.`,\n      icon: 'warning',\n      dangerMode: true,\n      buttons: true,\n    }).then(isConfirm => {\n      if (isConfirm) {\n        makeAdmin(name, emailid, e);\n      }\n    });\n  }\n\n  function makeAdmin(name, emailid, e) {\n    e.preventDefault();\n    const db = firebase.firestore();\n    db.collection('users').doc(emailid).update({ IsAdmin: true });\n  }\n\n  function removeFromAdmin(emailid, e) {\n    e.preventDefault();\n    const db = firebase.firestore();\n    db.collection('users').doc(emailid).update({ IsAdmin: false });\n  }\n\n  // ========================== Start and Stop Voting =========================\n  const [name, setname] = useState('');\n  const [announcement, setannouncement] = useState('');\n  const [nameError, setnameError] = useState('');\n  const [announcementError, setannouncementError] = useState('');\n  const [altname, setaltname] = useState(false);\n  const [altannouncement, setaltannouncement] = useState(false);\n  const [disabledSubmit, setdisabledSubmit] = useState(true);\n  const [disabledAnnounce, setdisabledAnnounce] = useState(true);\n  useEffect(() => {\n    if (altname && name.length < 3)\n      setnameError('name must be more than 2 characters');\n    else setnameError('');\n  }, [altname, name]);\n\n  useEffect(() => {\n    if (nameError) setdisabledSubmit(true);\n    else if (altname) setdisabledSubmit(false);\n  }, [nameError, altname]);\n\n  useEffect(() => {\n    if (announcementError) setdisabledAnnounce(true);\n    else if (altannouncement) setdisabledAnnounce(false);\n  }, [announcementError, altannouncement]);\n\n  useEffect(() => {\n    if (altannouncement && announcement.length < 3)\n      setannouncementError('Announcement must have more than 2 characters');\n    else setannouncementError('');\n  }, [altannouncement, announcement]);\n\n  const startAlert = e => {\n    e.preventDefault();\n    swal({\n      title: 'Are you sure ?',\n      text: ` Voting for ${name} will start now.`,\n      icon: 'warning',\n      dangerMode: true,\n      buttons: true,\n    }).then(isConfirm => {\n      if (isConfirm) {\n        start(e);\n      }\n    });\n  };\n\n  const start = e => {\n    e.preventDefault();\n    var options = { year: 'numeric', month: 'long', day: 'numeric' };\n    var today = new Date();\n    dispatch(\n      startVoting({\n        Name: name,\n        Start: today.toLocaleDateString('en-US', options),\n      })\n    );\n  };\n\n  const stopAlert = e => {\n    e.preventDefault();\n    swal({\n      title: 'Are you sure ?',\n      text: `Contest will end now.`,\n      icon: 'warning',\n      dangerMode: true,\n      buttons: true,\n    }).then(isConfirm => {\n      if (isConfirm) {\n        stop(e);\n      }\n    });\n  };\n  const stop = e => {\n    e.preventDefault();\n    var options = { year: 'numeric', month: 'long', day: 'numeric' };\n    var today = new Date();\n    dispatch(stopVoting({ End: today.toLocaleDateString('en-US', options) }));\n  };\n  const removeannouncement = (e, element) => {\n    e.preventDefault();\n    dispatch(removeAnnouncement(element));\n  };\n\n  const addannouncement = e => {\n    e.preventDefault();\n    dispatch(addAnnouncement(announcement));\n    setannouncement('');\n    setaltannouncement(false);\n    setdisabledAnnounce(true);\n  };\n\n  // =========================== Main Return from this component ==================================\n  if (user.isLoading)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <React.Fragment>\n      <main style={{ marginTop: '100px' }}>\n        {user.announcement ? (\n          <>\n            {user.announcement.map(element => (\n              <Grid container style={{ marginTop: '10px' }}>\n                <Grid item xs={12} md={9}>\n                  <Alert variant='filled' severity='success'>\n                    {element}\n                  </Alert>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <Button\n                    variant='outlined'\n                    color='secondary'\n                    small\n                    onClick={e => removeannouncement(e, element)}\n                  >\n                    Remove\n                  </Button>\n                </Grid>\n              </Grid>\n            ))}\n            <form Validate className='voting' style={{ marginBottom: 20 }}>\n              <TextField\n                error={announcementError}\n                helperText={announcementError}\n                variant='outlined'\n                margin='normal'\n                required\n                fullWidth\n                id='Name'\n                label='Announce'\n                name='announce'\n                autoComplete='name'\n                autoFocus\n                value={announcement}\n                onChange={e => {\n                  setannouncement(e.target.value);\n                  setaltannouncement(true);\n                }}\n                InputProps={{ className: 'voting_text' }}\n                InputLabelProps={{\n                  className: 'voting_text',\n                }}\n              />\n\n              <Button\n                type='submit'\n                fullWidth\n                variant='contained'\n                color='primary'\n                onClick={e => addannouncement(e)}\n                disabled={disabledAnnounce}\n                className='button1'\n              >\n                Announce\n              </Button>\n            </form>\n          </>\n        ) : (\n          <form Validate className='voting'>\n            <TextField\n              error={announcementError}\n              helperText={announcementError}\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              id='Name'\n              label='Event'\n              name='event'\n              autoComplete='name'\n              autoFocus\n              value={announcement}\n              onChange={e => {\n                setannouncement(e.target.value);\n                setaltannouncement(true);\n              }}\n              InputProps={{ className: 'voting_text' }}\n              InputLabelProps={{\n                className: 'voting_text',\n              }}\n            />\n\n            <Button\n              type='submit'\n              fullWidth\n              variant='contained'\n              color='primary'\n              onClick={e => addannouncement(e)}\n              disabled={disabledAnnounce}\n              className='button1'\n            >\n              Announce\n            </Button>\n          </form>\n        )}\n        {!user.isVoting ? (\n          <form Validate className='voting'>\n            <TextField\n              error={nameError}\n              helperText={nameError}\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              id='Name'\n              label='Event'\n              name='event'\n              autoComplete='name'\n              autoFocus\n              value={name}\n              onChange={e => {\n                setname(e.target.value);\n                setaltname(true);\n              }}\n              InputProps={{ className: 'voting_text' }}\n              InputLabelProps={{\n                className: 'voting_text',\n              }}\n            />\n\n            <Button\n              type='submit'\n              fullWidth\n              variant='contained'\n              color='primary'\n              onClick={startAlert}\n              disabled={disabledSubmit}\n              className='button1'\n            >\n              Start Voting\n            </Button>\n          </form>\n        ) : (\n          <Button\n            type='submit'\n            fullWidth\n            variant='contained'\n            color='primary'\n            onClick={stopAlert}\n          >\n            Stop Voting\n          </Button>\n        )}\n      </main>\n      <div style={{ marginTop: 100 }}>\n        <h1>BlackListed Movies</h1>\n      </div>\n      <main>\n        <section className='wrapper1'>\n          {result && result.length !== 0 ? (\n            result.map(resul => <RenderCard key={resul.id} r={resul} />)\n          ) : (\n            <div className='results'>\n              <img src={Img2} className='noresults' />\n              <h3>No Blacklisted movie</h3>\n            </div>\n          )}\n        </section>\n        {user.error ? (\n          <Snackbar open={open} autoHideDuration={10000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity='error'>\n              {`${user.error}`}\n            </Alert>\n          </Snackbar>\n        ) : user.successmsg ? (\n          <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity='success'>\n              {`${user.successmsg}`}\n            </Alert>\n          </Snackbar>\n        ) : (\n          <div></div>\n        )}\n        {/* Admin */}\n        <div style={{ marginTop: 100 }}>\n          <h1>All Administrators</h1>\n        </div>\n        <main>\n          {alladmin.length !== 0 ? (\n            <section className='wrapper1'>\n              {alladmin.map(admin => (\n                <React.Fragment className='profile-card'>\n                  <div\n                    class='our-team'\n                    style={{ width: '250px', height: '220px' }}\n                  >\n                    <div class='picture'>\n                      <img\n                        style={{ width: '130px', height: '130px' }}\n                        src={admin.ProfilePic}\n                      />\n                    </div>\n                    <div class='team-content'>\n                      <h3 class='name'>{admin.Name}</h3>\n                      <h4 class='title'>{admin.Email}</h4>\n                    </div>\n                    <ul class='social'>\n                      <Button\n                        variant='contained'\n                        style={{ width: '100%', backgroundColor: ' #1369ce' }}\n                        onClick={e => {\n                          removeFromAdmin(admin.Email, e);\n                        }}\n                        className='but1'\n                      >\n                        Dismiss From Admin\n                      </Button>\n                    </ul>\n                  </div>\n                </React.Fragment>\n              ))}\n            </section>\n          ) : (\n            <div className='results'>\n              <img src={Img2} className='noresults' />\n              <h3>No Admin users</h3>\n            </div>\n          )}\n        </main>\n        {/* Users */}\n      </main>\n      <div style={{ marginTop: 100, textAlign: 'center' }}>\n        <h1>All users</h1>\n      </div>\n      <main>\n        <InputBase\n          placeholder='Search…'\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput,\n          }}\n          inputProps={{ 'aria-label': 'search', id: 'sear' }}\n          onChange={() => {\n            var all = document\n              .getElementById('users_card')\n              .getElementsByClassName('our-team');\n\n            for (var i = 0; i < all.length; i++) {\n              var txtValue = all[i].innerText;\n              if (\n                txtValue\n                  .toLowerCase()\n                  .trim()\n                  .includes(\n                    document.getElementById('sear').value.toLowerCase().trim()\n                  )\n              ) {\n                all[i].style.display = '';\n              } else {\n                all[i].style.display = 'none';\n              }\n            }\n          }}\n        />\n        {allusers.length !== 0 ? (\n          <section className='wrapper1' id='users_card'>\n            {allusers.map(user => (\n              <React.Fragment className='profile-card'>\n                <div\n                  class='our-team'\n                  style={{ width: '250px', height: '220px' }}\n                >\n                  <div class='picture'>\n                    <img\n                      style={{ width: '130px', height: '130px' }}\n                      src={user.ProfilePic}\n                    />\n                  </div>\n                  <div class='team-content'>\n                    <h3 class='name'>{user.Name}</h3>\n                    <h4 class='title'>{user.Email}</h4>\n                  </div>\n                  <ul class='social'>\n                    <Button\n                      variant='contained'\n                      style={{ width: '100%', backgroundColor: ' #1369ce' }}\n                      onClick={e => {\n                        makeAdminAlert(user.Name, user.Email, e);\n                      }}\n                      className='but1'\n                    >\n                      Make Admin\n                    </Button>\n                  </ul>\n                </div>\n              </React.Fragment>\n            ))}\n          </section>\n        ) : (\n          <div className='results'>\n            <img src={Img2} className='noresults' />\n            <h3>No Users found</h3>\n          </div>\n        )}\n      </main>\n      <ScrollToTop />\n    </React.Fragment>\n  );\n};\n\nexport default AdminDashboardComponent;\n","F:\\cinecup\\src\\Components\\HistoryComponent\\HistoryComponent.js",["230","231"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './HistoryStyle.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Img2 from '../../icons/Asset 1@2x.png';\nimport { Link } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst HistoryComponent = () => {\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n  const user = useSelector(state => state.user);\n  const useStyles = makeStyles({\n    root: {\n      marginTop: 50,\n      minWidth: 275,\n      maxWidth: 300,\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n  });\n  const classes = useStyles();\n  if (user.isLoading)\n    return (\n      <CircularProgress\n        style={{ marginTop: '25vw' }}\n        color='secondary'\n      ></CircularProgress>\n    );\n  return (\n    <div>\n      <div class='wrapper_history'>\n        <div class='list'>\n          <div class='list__header'>\n            <h1>Previous Contests</h1>\n          </div>\n          {user.history && user.history.length ? (\n            <div class='list__body'>\n              <table class='list__table'>\n                <tr class='header_row'>\n                  <th class='list__cell'>S.no</th>\n                  <th class='list__cell'>Contest</th>\n                  <th class='list__cell'>Start date</th>\n                  <th class='list__cell'>End date</th>\n                  <th class='list__cell'>Link</th>\n                </tr>\n                {user.history.map((element, index) => {\n                  return (\n                    <tr class='list__row'>\n                      <td class='list__cell'>\n                        <span class='list__value'>{index + 1}</span>\n                      </td>\n                      <td class='list__cell'>\n                        <span class='list__value'>{`${element.Name}`}</span>\n                      </td>\n                      <td class='list__cell'>\n                        <span class='list__value'>{`${element.sDay}`}</span>\n                        <small class='list__label'>{`${element.sTime}`}</small>\n                      </td>\n                      <td class='list__cell'>\n                        <span class='list__value'>{`${element.eDay}`}</span>\n                        <small class='list__label'>{`${element.eTime}`}</small>\n                      </td>\n                      <td class='list__cell'>\n                        <Link\n                          to={`/history/${element.contestid}`}\n                          className='linky'\n                        >\n                          <span class='list__value'>\n                            <FontAwesomeIcon icon={faArrowCircleRight} />\n                          </span>\n                        </Link>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </table>\n            </div>\n          ) : (\n            <div className='results'>\n              <img src={Img2} className='noresults' />\n              <h3>No past contests</h3>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HistoryComponent;\n","F:\\cinecup\\src\\Components\\HeaderComponent\\HeaderComponent.js",["232","233","234","235","236","237"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport DashboardRoundedIcon from '@material-ui/icons/DashboardRounded';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport { lightTheme, darkTheme } from '../../theme';\nimport { GlobalStyles } from '../../global';\n\nimport Toggle from '../Toggle';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Timeline from '@material-ui/icons/Timeline';\n\nimport { Hidden } from '@material-ui/core';\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\n\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport List from '@material-ui/core/List';\nimport './HeaderStyle.css';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\n\nimport LockOpenRoundedIcon from '@material-ui/icons/LockOpenRounded';\nimport PersonAddRoundedIcon from '@material-ui/icons/PersonAddRounded';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport HistoryIcon from '@material-ui/icons/History';\n\nimport Switch from '@material-ui/core/Switch';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { logout } from '../../action/user_actions';\n\nimport { ExitToAppRounded } from '@material-ui/icons';\nfunction HeaderComponent({ theme, toggleTheme, componentMounted }) {\n  const user = useSelector(state => state.user);\n  const User = useSelector(state => state.user.user);\n\n  const dispatch = useDispatch();\n  const Logout = () => {\n    dispatch(logout());\n  };\n\n  const useStyles = makeStyles(theme => ({\n    list: {\n      width: 300,\n      alignItems: 'center',\n    },\n\n    root: {\n      flexGrow: 1,\n      display: 'flex',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n\n      color: 'white',\n    },\n    title: {\n      marginRight: theme.spacing(2),\n      fontWeight: 'bold',\n      color: 'white',\n    },\n    Button1: {\n      marginRight: theme.spacing(2),\n    },\n    navText: {\n      fontSize: 20,\n      marginLeft: 5,\n    },\n  }));\n  const [state, setState] = React.useState(false);\n\n  const toggleDrawer = open => event => {\n    if (\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState(open);\n  };\n\n  function TemporaryDrawer() {\n    const classes = useStyles();\n\n    return (\n      <div>\n        <React.Fragment>\n          <SwipeableDrawer\n            anchor='left'\n            open={state}\n            onClose={toggleDrawer(false)}\n            onOpen={toggleDrawer(true)}\n          >\n            <div className='drawe'>\n              <div style={{ width: '100%', display: 'flex' }}>\n                <IconButton\n                  style={{ position: 'absolute', right: 0 }}\n                  onClick={toggleDrawer(false)}\n                >\n                  <CancelRoundedIcon color='secondary' />\n                </IconButton>\n              </div>\n              {user.isLoggedIn ? (\n                <div className='navbrand'>\n                  <img className='rounded' src={User.ProfilePic} />\n                  <h2 className='title title-medium'>{User.Name}</h2>\n                </div>\n              ) : (\n                <div className='navbrand'>\n                  <img\n                    className='rounded'\n                    src='https://icons.iconarchive.com/icons/custom-icon-design/flatastic-3/256/user-icon.png'\n                  />\n                  <h2 className='title title-medium'>Welcome Guest</h2>\n                </div>\n              )}\n              <List className={classes.list}>\n                <Link to='/'>\n                  <ListItem button key='Home' onClick={toggleDrawer(false)}>\n                    <ListItemIcon>\n                      {' '}\n                      <HomeRoundedIcon color='primary' />{' '}\n                    </ListItemIcon>\n                    <ListItemText primary='HOME' />\n                  </ListItem>\n                </Link>\n\n                <Link to='/leaderboard'>\n                  <ListItem\n                    button\n                    key='leaderboard'\n                    onClick={toggleDrawer(false)}\n                  >\n                    <ListItemIcon>\n                      {' '}\n                      <Timeline color='primary' />{' '}\n                    </ListItemIcon>\n                    <ListItemText primary='LEADERBOARD' />\n                  </ListItem>\n                </Link>\n\n                <Link to='/history'>\n                  <ListItem button key='history' onClick={toggleDrawer(false)}>\n                    <ListItemIcon>\n                      {' '}\n                      <HistoryIcon color='primary' />{' '}\n                    </ListItemIcon>\n                    <ListItemText primary='CONTESTS' />\n                  </ListItem>\n                </Link>\n\n                <Link to='/Search'>\n                  <ListItem button key='Search' onClick={toggleDrawer(false)}>\n                    <ListItemIcon>\n                      {' '}\n                      <SearchRoundedIcon color='primary' />{' '}\n                    </ListItemIcon>\n                    <ListItemText primary='SEARCH' />\n                  </ListItem>\n                </Link>\n\n                <ListItem key='Dark Mode'>\n                  <ListItemIcon>\n                    {' '}\n                    <Brightness4Icon color='primary' />{' '}\n                  </ListItemIcon>\n                  <Toggle theme={theme} toggleTheme={toggleTheme} />\n                  {theme === 'light' ? 'LIGHT' : 'DARK'}\n                </ListItem>\n\n                {user.isLoggedIn ? (\n                  <React.Fragment>\n                    <Link to='/dashboard'>\n                      <ListItem\n                        button\n                        key='Dashboard'\n                        onClick={toggleDrawer(false)}\n                      >\n                        <ListItemIcon>\n                          {' '}\n                          <DashboardRoundedIcon color='primary' />{' '}\n                        </ListItemIcon>\n                        <ListItemText primary='DASHBOARD' />\n                      </ListItem>\n                    </Link>\n                    {user.user.IsAdmin ? (\n                      <Link to='/admin'>\n                        <ListItem\n                          button\n                          key='Admin Dashboard'\n                          onClick={toggleDrawer(false)}\n                        >\n                          <ListItemIcon>\n                            {' '}\n                            <SupervisorAccountIcon color='primary' />{' '}\n                          </ListItemIcon>\n                          <ListItemText primary='ADMIN DASHBOARD' />\n                        </ListItem>\n                      </Link>\n                    ) : (\n                      <Link></Link>\n                    )}\n                    <ListItem\n                      button\n                      key='Logout'\n                      onClick={() => {\n                        toggleDrawer(false);\n                        Logout();\n                      }}\n                    >\n                      <ListItemIcon>\n                        {' '}\n                        <LockOpenRoundedIcon color='primary' />{' '}\n                      </ListItemIcon>\n                      <ListItemText primary='LOGOUT' />\n                    </ListItem>\n                  </React.Fragment>\n                ) : (\n                  <React.Fragment>\n                    <Link to='/login'>\n                      <ListItem\n                        button\n                        key='Login'\n                        onClick={toggleDrawer(false)}\n                      >\n                        <ListItemIcon>\n                          {' '}\n                          <LockOpenRoundedIcon color='primary' />{' '}\n                        </ListItemIcon>\n                        <ListItemText primary='LOGIN' />\n                      </ListItem>\n                    </Link>\n\n                    <Link to='/signup'>\n                      <ListItem\n                        button\n                        key='Signup'\n                        onClick={toggleDrawer(false)}\n                      >\n                        <ListItemIcon>\n                          {' '}\n                          <PersonAddRoundedIcon color='primary' />{' '}\n                        </ListItemIcon>\n                        <ListItemText primary='SIGNUP' />\n                      </ListItem>\n                    </Link>\n                  </React.Fragment>\n                )}\n              </List>\n            </div>\n          </SwipeableDrawer>\n        </React.Fragment>\n      </div>\n    );\n  }\n\n  function ButtonAppBar() {\n    const classes = useStyles();\n\n    return (\n      <div className={classes.root}>\n        <AppBar position='fixed' className='navbar_h'>\n          <Toolbar>\n            <IconButton\n              edge='start'\n              className={classes.menuButton}\n              color='inherit'\n              aria-label='menu'\n              onClick={toggleDrawer(true)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant='h6' className={classes.title}>\n              CINECUP\n            </Typography>\n\n            <Hidden mdDown>\n              <div style={{ position: 'absolute', right: 0 }}>\n                <Link to='/'>\n                  <IconButton\n                    edge='start'\n                    className={classes.menuButton}\n                    color='inherit'\n                    aria-label='menu'\n                  >\n                    <HomeRoundedIcon fontSize='small' />\n                    <span className={classes.navText}>Home</span>\n                  </IconButton>\n                </Link>\n                <Link to='/leaderboard'>\n                  <IconButton\n                    edge='start'\n                    className={classes.menuButton}\n                    color='inherit'\n                    aria-label='menu'\n                  >\n                    <Timeline fontSize='small' />\n                    <span className={classes.navText}>LeaderBoard</span>\n                  </IconButton>\n                </Link>\n\n                <Link to='/history'>\n                  <IconButton\n                    edge='start'\n                    className={classes.menuButton}\n                    color='inherit'\n                    aria-label='menu'\n                  >\n                    <HistoryIcon fontSize='small' />\n                    <span className={classes.navText}>Contests</span>\n                  </IconButton>\n                </Link>\n\n                <Link to='/search'>\n                  <IconButton\n                    edge='start'\n                    className={classes.menuButton}\n                    color='inherit'\n                    aria-label='menu'\n                  >\n                    <SearchRoundedIcon fontSize='small' />\n                    <span className={classes.navText}>Search</span>\n                  </IconButton>\n                </Link>\n                {user.isLoggedIn ? (\n                  <React.Fragment>\n                    <Link to='/dashboard'>\n                      <IconButton\n                        edge='start'\n                        className={classes.menuButton}\n                        color='inherit'\n                        aria-label='menu'\n                      >\n                        <DashboardRoundedIcon fontSize='small' />\n                        <span className={classes.navText}>Dashboard</span>\n                      </IconButton>\n                    </Link>\n                    {user.user.IsAdmin ? (\n                      <Link to='/admin'>\n                        <IconButton\n                          edge='start'\n                          className={classes.menuButton}\n                          color='inherit'\n                          aria-label='menu'\n                        >\n                          <SupervisorAccountIcon fontSize='small' />\n                          <span className={classes.navText}>\n                            Admin Dashboard\n                          </span>\n                        </IconButton>\n                      </Link>\n                    ) : (\n                      <Link></Link>\n                    )}\n\n                    <IconButton\n                      edge='start'\n                      className={classes.menuButton}\n                      color='inherit'\n                      aria-label='menu'\n                      onClick={Logout}\n                    >\n                      <ExitToAppRounded fontSize='small' />\n                      <span className={classes.navText}>Logout</span>\n                    </IconButton>\n                  </React.Fragment>\n                ) : (\n                  <React.Fragment>\n                    <Link to='/login'>\n                      <IconButton\n                        edge='start'\n                        className={classes.menuButton}\n                        color='inherit'\n                        aria-label='menu'\n                      >\n                        <LockOpenRoundedIcon fontSize='small' />\n                        <span className={classes.navText}>Login</span>\n                      </IconButton>\n                    </Link>\n                    <Link to='/signup'>\n                      <IconButton\n                        edge='start'\n                        className={classes.menuButton}\n                        color='inherit'\n                        aria-label='menu'\n                      >\n                        <PersonAddRoundedIcon fontSize='small' />\n                        <span className={classes.navText}>Signup</span>\n                      </IconButton>\n                    </Link>\n                  </React.Fragment>\n                )}\n              </div>\n            </Hidden>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n\n  if (user.isLoading) return <></>;\n  if (!componentMounted) {\n    return <div />;\n  }\n  return (\n    <>\n      <TemporaryDrawer />\n      <ButtonAppBar />\n    </>\n  );\n}\n\nexport default HeaderComponent;\n","F:\\cinecup\\src\\reducer\\user_reducer.js",[],"F:\\cinecup\\src\\Components\\SearchPageComponent\\Search.js",["238","239","240"],"import React from 'react';\nimport './SearchPageStyle.css';\nimport LocalMoviesIcon from '@material-ui/icons/LocalMovies';\nimport { Button } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nfunction Search({ handleInput }) {\n  const user = useSelector(state => state.user);\n  return (\n    <section className='searchbox-wrap'>\n      <input\n        type='text'\n        placeholder='Search for a movie...'\n        className='searchbox'\n        onChange={handleInput}\n        value={user.queryString}\n      />\n    </section>\n  );\n}\n\nexport default Search;\n","F:\\cinecup\\src\\action\\user_actions.js",["241","242","243","244","245","246","247","248","249","250"],"F:\\cinecup\\src\\action\\types.js",[],"F:\\cinecup\\src\\key\\key.js",[],"F:\\cinecup\\src\\Components\\SearchPageComponent\\Popup.js",["251"],"import React from 'react';\nimport './SearchPageStyle.css';\nfunction Popup({ selected, closePopup }) {\n  return (\n    <section className='popup'>\n      <div className='content'>\n        <div className='con'>\n          <h2>\n            {selected.Title} <span>({selected.Year})</span>\n          </h2>\n          <br />\n        </div>\n        <div className='plot'>\n          <img src={selected.Poster} />\n          <div className='pa'>\n            <p className='rating'>\n              <span>IMDB Rating : </span>\n              {selected.imdbRating} <br />\n              <br />\n              <span>Genre :</span> {selected.Genre}\n              <br></br>\n              <br></br>\n              <span>Actors : </span>\n              {selected.Actors}\n              <br></br>\n              <br></br>\n              {selected.Plot}\n            </p>\n          </div>\n        </div>\n        <button className='close' onClick={closePopup}>\n          Close\n        </button>\n      </div>\n    </section>\n  );\n}\n\nexport default Popup;\n","F:\\cinecup\\src\\Components\\SearchPageComponent\\Results.js",["252"],"import React from 'react';\nimport './SearchPageStyle.css';\nimport Result from './Result';\nimport Img2 from '../../icons/Asset 1@2x.png';\nfunction Results({ results, openPopup }) {\n  if (results.length) {\n    return (\n      <section className='wrapper'>\n        {results.map(result => (\n          <Result key={result.id} result={result} openPopup={openPopup} />\n        ))}\n      </section>\n    );\n  } else {\n    return (\n      <div className='results'>\n        <img src={Img2} className='noresults' />\n        <h2>Nothing found</h2>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","F:\\cinecup\\src\\Components\\shareButton.js",[],"F:\\cinecup\\src\\Components\\SearchPageComponent\\Result.js",["253","254"],"import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { nominate } from '../../action/user_actions';\nimport { blackListMovie } from '../../action/movie_actions';\nimport { Button, Hidden } from '@material-ui/core';\nimport ShareButton from '../shareButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport swal from 'sweetalert';\n\nimport Rating from '@material-ui/lab/Rating';\n\nfunction Result({ result, openPopup }) {\n  const useStyles = makeStyles({\n    but: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyItems: 'center',\n    },\n    button1: {\n      position: 'relative',\n    },\n  });\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const [btn, setbtn] = useState(false);\n  const [blackbtn, setblackbtn] = useState(false);\n  const Nominate = e => {\n    e.preventDefault();\n    const dataToSubmit = {\n      Email: user.user.Email,\n      movieId: result.id,\n    };\n    dispatch(nominate(dataToSubmit));\n  };\n  const classes = useStyles();\n\n  function BlacklistMovieAlert(e) {\n    e.preventDefault();\n    swal({\n      title: 'Are you sure ?',\n      text: `${result.title} will be blacklisted and it's votes will be reduced to 0`,\n      icon: 'warning',\n      dangerMode: true,\n      buttons: true,\n    }).then(isConfirm => {\n      if (isConfirm) {\n        setblackbtn(true);\n        setbtn(true);\n        BlacklistMovie(e);\n      }\n    });\n  }\n\n  const BlacklistMovie = async e => {\n    e.preventDefault();\n    const dataToSubmit = {\n      movieId: result.id,\n      movieName: result.title,\n    };\n    dispatch(blackListMovie(dataToSubmit));\n  };\n\n  const isdisabled = id => {\n    if (user.isLoggedIn && user.isVoting) {\n      if (user.blacklist && user.blacklist.includes(id.toString())) return true;\n      else if (user && user.user && user.user.Nominations.length) {\n        if (\n          user.user.Nominations.length === 5 &&\n          !user.user.Nominations.includes(id)\n        )\n          return true;\n      }\n      return false;\n    }\n    return true;\n  };\n  const isNominatedbyUser = id => {\n    if (user.isLoggedIn && user.isVoting) {\n      if (user && user.user && user.user.Nominations.length) {\n        if (user.user.Nominations.includes(id)) return true;\n      }\n      return false;\n    }\n    return false;\n  };\n  const isblackdisabled = id => {\n    if (user.isLoggedIn) {\n      if (user && user.blacklist && user.blacklist.includes(id.toString()))\n        return true;\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <div className='card_s'>\n      <div\n        className='front_s'\n        style={{\n          backgroundImage:\n            'url(' +\n            `https://image.tmdb.org/t/p/w500/${result.poster_path}` +\n            ')',\n        }}\n      ></div>\n      <div className='back_s'>\n        <div style={{ display: 'flex', flexDirection: 'column ' }}>\n          <div>\n            <h2>{result.title}</h2>\n            <h3>{result.release_date}</h3>\n            <Rating\n              precision='0.5'\n              name='read-only'\n              value={result.vote_average / 2}\n              readOnly\n            />\n          </div>\n\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              textAlign: 'center',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Link to={`/movie/${result.id}`}>\n              <Button\n                className='button_s'\n                variant='outlined'\n                color='secondary'\n                style={{ marginBottom: 10 }}\n              >\n                Explore\n              </Button>\n            </Link>\n            <Button\n              className='button_s'\n              disabled={isdisabled(result.id)}\n              style={{ marginBottom: 10 }}\n              variant='outlined'\n              color='primary'\n              onClick={e => {\n                if (!btn) {\n                  setbtn(true);\n                  Nominate(e);\n                }\n              }}\n            >\n              {isNominatedbyUser(result.id) ? (\n                <span>Nominated</span>\n              ) : (\n                <span>Nominate</span>\n              )}\n            </Button>\n            {user.user && user.user.IsAdmin ? (\n              <Button\n                className='button_s'\n                variant='outlined'\n                color='secondary'\n                disabled={blackbtn || isblackdisabled(result.id)}\n                onClick={e => {\n                  BlacklistMovieAlert(e);\n                }}\n              >\n                Blacklist\n              </Button>\n            ) : (\n              <span></span>\n            )}\n            <div className='share_but_s'>\n              <ShareButton\n                url={`https://cinecup-9b0ac.web.app/movie/${result.id}`}\n                image={`https://image.tmdb.org/t/p/w500/${result.poster_path}`}\n                title={`${result.title} - ${result.overview} \n            Check out the trailer on this page`}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Result;\n","F:\\cinecup\\src\\theme.js",[],"F:\\cinecup\\src\\global.js",[],"F:\\cinecup\\src\\Components\\Toggle.js",["255"],"import React from 'react';\nimport { func, string } from 'prop-types';\n\nimport Switch from '@material-ui/core/Switch';\n\nconst Toggle = ({ theme, toggleTheme }) => {\n  const isLight = theme === 'light';\n  const ThemeContext = React.createContext(theme);\n  return (\n    <>\n      <Switch\n        checked={isLight}\n        onChange={toggleTheme}\n        name='Theme'\n        inputProps={{ 'aria-label': 'secondary checkbox' }}\n      />\n    </>\n  );\n};\n\nToggle.propTypes = {\n  toggleTheme: func.isRequired,\n  theme: string.isRequired,\n};\n\nexport default Toggle;\n","F:\\cinecup\\src\\Components\\UserProfile\\UserProfile.js",["256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],"import { React, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TMDB_API_KEY } from '../../key/key';\nimport axios from 'axios';\nimport firebase from 'firebase';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Rating from '@material-ui/lab/Rating';\nimport './UserStyles.css';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from 'react-router-dom';\nimport ShareButton from '../shareButton';\nimport Img2 from '../../icons/Asset 1@2x.png';\nimport ScrollToTop from '../scrollToTop';\nconst UserProfile = () => {\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 345,\n    },\n    media: {\n      height: 140,\n    },\n    paper: {\n      padding: 2,\n      textAlign: 'center',\n      color: 'white',\n      backgroundColor: '#101010',\n    },\n  });\n  const classes = useStyles();\n  const user = useSelector(state => state.user);\n  const { user_id } = useParams();\n  const [userDetail, setuserDetail] = useState({});\n  const [reviewDetail, setreviewDetail] = useState([]);\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.doc(`users/${user_id}`)\n      .get()\n      .then(doc => {\n        if (doc.exists) {\n          setuserDetail(doc.data());\n        } else {\n        }\n      })\n      .catch(err => {});\n  }, []);\n\n  async function getMovieDetails(obj) {\n    let querySnapshot = obj.docs;\n    let arr = [];\n    for (let i = 0; i < querySnapshot.length; i++) {\n      let doc = querySnapshot[i];\n      try {\n        let res = await axios.get(\n          `https://api.themoviedb.org/3/movie/${\n            doc.data().mid\n          }?api_key=${TMDB_API_KEY}`\n        );\n        arr.push({\n          ...res.data,\n          review: doc.data().review,\n          rating: doc.data().rating,\n        });\n      } catch (err) {}\n    }\n    return arr;\n  }\n  useEffect(() => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection('reviews')\n      .where('uid', '==', user_id)\n      .get()\n      .then(async function (querySnapshot) {\n        let arr = [];\n        arr = await getMovieDetails(querySnapshot);\n        setreviewDetail(arr);\n      })\n      .catch(function (error) {});\n  }, []);\n\n  return (\n    <div className='user_wrapper'>\n      <Grid container spacing={1} className='user_details_u'>\n        <Grid item xs={12}>\n          <div>\n            <img src={userDetail.ProfilePic} className='user_avatar' />\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div>\n            <h2>{userDetail.Name}</h2>\n            <h3 style={{ color: 'gold' }}>\n              Email : <span style={{ color: 'grey' }}>{userDetail.Email}</span>\n            </h3>\n          </div>\n        </Grid>\n      </Grid>\n\n      <div className='users_reviews'>\n        <h1>Reviews</h1>\n\n        {reviewDetail.length ? (\n          reviewDetail.map(x => {\n            return (\n              <Grid container spacing={1} className='user_reviewed'>\n                <Grid item xs={12} md={3}>\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${x.poster_path}`}\n                  />\n                </Grid>\n\n                <Grid item xs={12} md={6} className='reviewed'>\n                  <h2>{x.title}</h2>\n                  <Rating precision='0.5' value={x.rating} readOnly />\n                  <h3 className='user_review1'>\"{x.review}\"</h3>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <Link to={`/movie/${x.id}`}>\n                    <Button\n                      variant='outlined'\n                      color='secondary'\n                      href='#outlined-buttons'\n                      style={{ margin: 10 }}\n                    >\n                      Explore\n                    </Button>\n                  </Link>\n                </Grid>\n              </Grid>\n            );\n          })\n        ) : (\n          <div className='results'>\n            <img src={Img2} className='noresults' />\n            <h3>No movie reviewed yet</h3>\n          </div>\n        )}\n      </div>\n      <ScrollToTop />\n    </div>\n  );\n};\n\nexport default UserProfile;\n","F:\\cinecup\\src\\Components\\scrollToTop.js",[],{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":72,"column":6,"nodeType":"279","endLine":72,"endColumn":8,"suggestions":"280"},{"ruleId":"281","severity":1,"message":"282","line":8,"column":3,"nodeType":"283","messageId":"284","endLine":8,"endColumn":26},{"ruleId":"281","severity":1,"message":"285","line":33,"column":9,"nodeType":"283","messageId":"284","endLine":33,"endColumn":20},{"ruleId":"281","severity":1,"message":"285","line":85,"column":9,"nodeType":"283","messageId":"284","endLine":85,"endColumn":20},{"ruleId":"281","severity":1,"message":"285","line":138,"column":9,"nodeType":"283","messageId":"284","endLine":138,"endColumn":20},{"ruleId":"281","severity":1,"message":"286","line":292,"column":19,"nodeType":"283","messageId":"284","endLine":292,"endColumn":22},{"ruleId":"281","severity":1,"message":"286","line":407,"column":31,"nodeType":"283","messageId":"284","endLine":407,"endColumn":34},{"ruleId":"277","severity":1,"message":"287","line":29,"column":8,"nodeType":"279","endLine":29,"endColumn":50,"suggestions":"288"},{"ruleId":"281","severity":1,"message":"289","line":7,"column":8,"nodeType":"283","messageId":"284","endLine":7,"endColumn":13},{"ruleId":"281","severity":1,"message":"290","line":49,"column":9,"nodeType":"283","messageId":"284","endLine":49,"endColumn":26},{"ruleId":"277","severity":1,"message":"291","line":82,"column":6,"nodeType":"279","endLine":82,"endColumn":24,"suggestions":"292"},{"ruleId":"281","severity":1,"message":"293","line":84,"column":9,"nodeType":"283","messageId":"284","endLine":84,"endColumn":18},{"ruleId":"281","severity":1,"message":"294","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":26},{"ruleId":"281","severity":1,"message":"295","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"296","line":5,"column":23,"nodeType":"283","messageId":"284","endLine":5,"endColumn":34},{"ruleId":"281","severity":1,"message":"297","line":24,"column":11,"nodeType":"283","messageId":"284","endLine":24,"endColumn":21},{"ruleId":"281","severity":1,"message":"298","line":4,"column":8,"nodeType":"283","messageId":"284","endLine":4,"endColumn":19},{"ruleId":"281","severity":1,"message":"299","line":6,"column":8,"nodeType":"283","messageId":"284","endLine":6,"endColumn":24},{"ruleId":"281","severity":1,"message":"300","line":7,"column":8,"nodeType":"283","messageId":"284","endLine":7,"endColumn":16},{"ruleId":"281","severity":1,"message":"289","line":9,"column":8,"nodeType":"283","messageId":"284","endLine":9,"endColumn":13},{"ruleId":"281","severity":1,"message":"301","line":10,"column":8,"nodeType":"283","messageId":"284","endLine":10,"endColumn":11},{"ruleId":"281","severity":1,"message":"302","line":67,"column":9,"nodeType":"283","messageId":"284","endLine":67,"endColumn":24},{"ruleId":"281","severity":1,"message":"303","line":124,"column":9,"nodeType":"283","messageId":"284","endLine":124,"endColumn":20},{"ruleId":"304","severity":1,"message":"305","line":43,"column":14,"nodeType":"306","messageId":"307","endLine":43,"endColumn":16},{"ruleId":"304","severity":1,"message":"305","line":47,"column":14,"nodeType":"306","messageId":"307","endLine":47,"endColumn":16},{"ruleId":"304","severity":1,"message":"305","line":51,"column":14,"nodeType":"306","messageId":"307","endLine":51,"endColumn":16},{"ruleId":"308","severity":1,"message":"309","line":136,"column":11,"nodeType":"310","endLine":140,"endColumn":13},{"ruleId":"281","severity":1,"message":"311","line":168,"column":9,"nodeType":"283","messageId":"284","endLine":168,"endColumn":16},{"ruleId":"277","severity":1,"message":"312","line":195,"column":6,"nodeType":"279","endLine":195,"endColumn":15,"suggestions":"313"},{"ruleId":"281","severity":1,"message":"296","line":3,"column":23,"nodeType":"283","messageId":"284","endLine":3,"endColumn":34},{"ruleId":"281","severity":1,"message":"314","line":9,"column":17,"nodeType":"283","messageId":"284","endLine":9,"endColumn":22},{"ruleId":"281","severity":1,"message":"315","line":16,"column":20,"nodeType":"283","messageId":"284","endLine":16,"endColumn":25},{"ruleId":"277","severity":1,"message":"316","line":60,"column":6,"nodeType":"279","endLine":60,"endColumn":23,"suggestions":"317"},{"ruleId":"277","severity":1,"message":"318","line":107,"column":6,"nodeType":"279","endLine":107,"endColumn":8,"suggestions":"319"},{"ruleId":"320","severity":1,"message":"321","line":149,"column":11,"nodeType":"310","endLine":151,"endColumn":13},{"ruleId":"320","severity":1,"message":"321","line":212,"column":21,"nodeType":"310","endLine":215,"endColumn":23},{"ruleId":"320","severity":1,"message":"321","line":230,"column":25,"nodeType":"310","endLine":230,"endColumn":73},{"ruleId":"304","severity":1,"message":"322","line":265,"column":44,"nodeType":"306","messageId":"307","endLine":265,"endColumn":46},{"ruleId":"281","severity":1,"message":"323","line":10,"column":8,"nodeType":"283","messageId":"284","endLine":10,"endColumn":19},{"ruleId":"281","severity":1,"message":"324","line":13,"column":10,"nodeType":"283","messageId":"284","endLine":13,"endColumn":16},{"ruleId":"281","severity":1,"message":"311","line":76,"column":9,"nodeType":"283","messageId":"284","endLine":76,"endColumn":16},{"ruleId":"320","severity":1,"message":"321","line":169,"column":15,"nodeType":"310","endLine":169,"endColumn":55},{"ruleId":"320","severity":1,"message":"321","line":174,"column":19,"nodeType":"310","endLine":174,"endColumn":59},{"ruleId":"281","severity":1,"message":"311","line":29,"column":9,"nodeType":"283","messageId":"284","endLine":29,"endColumn":16},{"ruleId":"277","severity":1,"message":"325","line":69,"column":6,"nodeType":"279","endLine":69,"endColumn":23,"suggestions":"326"},{"ruleId":"281","severity":1,"message":"327","line":94,"column":11,"nodeType":"283","messageId":"284","endLine":94,"endColumn":19},{"ruleId":"281","severity":1,"message":"290","line":172,"column":9,"nodeType":"283","messageId":"284","endLine":172,"endColumn":26},{"ruleId":"328","severity":1,"message":"329","line":223,"column":22,"nodeType":"306","messageId":"330","endLine":223,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":223,"column":75,"nodeType":"306","messageId":"330","endLine":223,"endColumn":76},{"ruleId":"277","severity":1,"message":"331","line":298,"column":6,"nodeType":"279","endLine":298,"endColumn":23,"suggestions":"332"},{"ruleId":"320","severity":1,"message":"321","line":319,"column":17,"nodeType":"310","endLine":319,"endColumn":57},{"ruleId":"320","severity":1,"message":"321","line":347,"column":21,"nodeType":"310","endLine":349,"endColumn":23},{"ruleId":"320","severity":1,"message":"321","line":384,"column":17,"nodeType":"310","endLine":384,"endColumn":57},{"ruleId":"281","severity":1,"message":"290","line":54,"column":7,"nodeType":"283","messageId":"284","endLine":54,"endColumn":24},{"ruleId":"281","severity":1,"message":"303","line":95,"column":9,"nodeType":"283","messageId":"284","endLine":95,"endColumn":20},{"ruleId":"281","severity":1,"message":"333","line":14,"column":8,"nodeType":"283","messageId":"284","endLine":14,"endColumn":23},{"ruleId":"281","severity":1,"message":"324","line":29,"column":10,"nodeType":"283","messageId":"284","endLine":29,"endColumn":16},{"ruleId":"281","severity":1,"message":"290","line":119,"column":9,"nodeType":"283","messageId":"284","endLine":119,"endColumn":26},{"ruleId":"328","severity":1,"message":"329","line":171,"column":22,"nodeType":"306","messageId":"330","endLine":171,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":171,"column":75,"nodeType":"306","messageId":"330","endLine":171,"endColumn":76},{"ruleId":"277","severity":1,"message":"334","line":238,"column":6,"nodeType":"279","endLine":238,"endColumn":23,"suggestions":"335"},{"ruleId":"281","severity":1,"message":"285","line":245,"column":9,"nodeType":"283","messageId":"284","endLine":245,"endColumn":20},{"ruleId":"320","severity":1,"message":"321","line":542,"column":17,"nodeType":"310","endLine":542,"endColumn":57},{"ruleId":"320","severity":1,"message":"321","line":576,"column":23,"nodeType":"310","endLine":579,"endColumn":25},{"ruleId":"320","severity":1,"message":"321","line":603,"column":17,"nodeType":"310","endLine":603,"endColumn":57},{"ruleId":"320","severity":1,"message":"321","line":652,"column":21,"nodeType":"310","endLine":655,"endColumn":23},{"ruleId":"320","severity":1,"message":"321","line":679,"column":15,"nodeType":"310","endLine":679,"endColumn":55},{"ruleId":"281","severity":1,"message":"311","line":38,"column":9,"nodeType":"283","messageId":"284","endLine":38,"endColumn":16},{"ruleId":"320","severity":1,"message":"321","line":97,"column":17,"nodeType":"310","endLine":97,"endColumn":57},{"ruleId":"281","severity":1,"message":"336","line":9,"column":10,"nodeType":"283","messageId":"284","endLine":9,"endColumn":20},{"ruleId":"281","severity":1,"message":"337","line":9,"column":22,"nodeType":"283","messageId":"284","endLine":9,"endColumn":31},{"ruleId":"281","severity":1,"message":"338","line":10,"column":10,"nodeType":"283","messageId":"284","endLine":10,"endColumn":22},{"ruleId":"281","severity":1,"message":"339","line":35,"column":8,"nodeType":"283","messageId":"284","endLine":35,"endColumn":14},{"ruleId":"320","severity":1,"message":"321","line":113,"column":19,"nodeType":"310","endLine":113,"endColumn":68},{"ruleId":"320","severity":1,"message":"321","line":118,"column":21,"nodeType":"310","endLine":121,"endColumn":23},{"ruleId":"281","severity":1,"message":"333","line":3,"column":8,"nodeType":"283","messageId":"284","endLine":3,"endColumn":23},{"ruleId":"281","severity":1,"message":"340","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":16},{"ruleId":"281","severity":1,"message":"296","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":21},{"ruleId":"281","severity":1,"message":"341","line":147,"column":13,"nodeType":"283","messageId":"284","endLine":147,"endColumn":22},{"ruleId":"281","severity":1,"message":"342","line":148,"column":13,"nodeType":"283","messageId":"284","endLine":148,"endColumn":25},{"ruleId":"281","severity":1,"message":"343","line":171,"column":13,"nodeType":"283","messageId":"284","endLine":171,"endColumn":18},{"ruleId":"281","severity":1,"message":"344","line":233,"column":13,"nodeType":"283","messageId":"284","endLine":233,"endColumn":18},{"ruleId":"281","severity":1,"message":"345","line":235,"column":13,"nodeType":"283","messageId":"284","endLine":235,"endColumn":23},{"ruleId":"281","severity":1,"message":"343","line":260,"column":13,"nodeType":"283","messageId":"284","endLine":260,"endColumn":18},{"ruleId":"281","severity":1,"message":"341","line":319,"column":13,"nodeType":"283","messageId":"284","endLine":319,"endColumn":22},{"ruleId":"281","severity":1,"message":"342","line":320,"column":13,"nodeType":"283","messageId":"284","endLine":320,"endColumn":25},{"ruleId":"281","severity":1,"message":"344","line":322,"column":13,"nodeType":"283","messageId":"284","endLine":322,"endColumn":18},{"ruleId":"281","severity":1,"message":"345","line":324,"column":13,"nodeType":"283","messageId":"284","endLine":324,"endColumn":23},{"ruleId":"320","severity":1,"message":"321","line":14,"column":11,"nodeType":"310","endLine":14,"endColumn":40},{"ruleId":"320","severity":1,"message":"321","line":17,"column":9,"nodeType":"310","endLine":17,"endColumn":49},{"ruleId":"281","severity":1,"message":"324","line":6,"column":18,"nodeType":"283","messageId":"284","endLine":6,"endColumn":24},{"ruleId":"281","severity":1,"message":"311","line":37,"column":9,"nodeType":"283","messageId":"284","endLine":37,"endColumn":16},{"ruleId":"281","severity":1,"message":"346","line":8,"column":9,"nodeType":"283","messageId":"284","endLine":8,"endColumn":21},{"ruleId":"281","severity":1,"message":"296","line":3,"column":23,"nodeType":"283","messageId":"284","endLine":3,"endColumn":34},{"ruleId":"281","severity":1,"message":"347","line":7,"column":8,"nodeType":"283","messageId":"284","endLine":7,"endColumn":24},{"ruleId":"281","severity":1,"message":"348","line":9,"column":8,"nodeType":"283","messageId":"284","endLine":9,"endColumn":12},{"ruleId":"281","severity":1,"message":"349","line":10,"column":8,"nodeType":"283","messageId":"284","endLine":10,"endColumn":22},{"ruleId":"281","severity":1,"message":"350","line":11,"column":8,"nodeType":"283","messageId":"284","endLine":11,"endColumn":19},{"ruleId":"281","severity":1,"message":"351","line":12,"column":8,"nodeType":"283","messageId":"284","endLine":12,"endColumn":19},{"ruleId":"281","severity":1,"message":"352","line":13,"column":8,"nodeType":"283","messageId":"284","endLine":13,"endColumn":17},{"ruleId":"281","severity":1,"message":"353","line":15,"column":8,"nodeType":"283","messageId":"284","endLine":15,"endColumn":18},{"ruleId":"281","severity":1,"message":"289","line":18,"column":8,"nodeType":"283","messageId":"284","endLine":18,"endColumn":13},{"ruleId":"281","severity":1,"message":"323","line":21,"column":8,"nodeType":"283","messageId":"284","endLine":21,"endColumn":19},{"ruleId":"281","severity":1,"message":"311","line":39,"column":9,"nodeType":"283","messageId":"284","endLine":39,"endColumn":16},{"ruleId":"281","severity":1,"message":"354","line":40,"column":9,"nodeType":"283","messageId":"284","endLine":40,"endColumn":13},{"ruleId":"277","severity":1,"message":"355","line":55,"column":6,"nodeType":"279","endLine":55,"endColumn":8,"suggestions":"356"},{"ruleId":"277","severity":1,"message":"355","line":94,"column":6,"nodeType":"279","endLine":94,"endColumn":8,"suggestions":"357"},{"ruleId":"320","severity":1,"message":"321","line":101,"column":13,"nodeType":"310","endLine":101,"endColumn":72},{"ruleId":"320","severity":1,"message":"321","line":122,"column":19,"nodeType":"310","endLine":124,"endColumn":21},{"ruleId":"320","severity":1,"message":"321","line":149,"column":15,"nodeType":"310","endLine":149,"endColumn":55},"no-native-reassign",["358"],"no-negated-in-lhs",["359"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["360"],"no-unused-vars","'BLACKLIST_MOVIE_FAILURE' is defined but never used.","Identifier","unusedVar","'unsubscribe' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.user.IsAdmin'. Either include it or remove the dependency array.",["361"],"'Paper' is defined but never used.","'useSnackbarStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["362"],"'openPopup' is assigned a value but never used.","'Component' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'intervalId' is assigned a value but never used.","'CssBaseline' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'Snackbarclasses' is assigned a value but never used.","'handleClick' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["363"],"'anime' is defined but never used.","'props' is defined but never used.","React Hook useEffect has missing dependencies: 'getUserDetails' and 'movie_id'. Either include them or remove the dependency array.",["364"],"React Hook useEffect has a missing dependency: 'creditsapi'. Either include it or remove the dependency array.",["365"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Expected '!==' and instead saw '!='.","'ShareButton' is defined but never used.","'Hidden' is defined but never used.","React Hook useEffect has a missing dependency: 'user.user'. Either include it or remove the dependency array.",["366"],"'response' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'fetchData' and 'user.user'. Either include them or remove the dependency array.",["367"],"'LocalMoviesIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchData' and 'user.blacklist'. Either include them or remove the dependency array.",["368"],"'lightTheme' is defined but never used.","'darkTheme' is defined but never used.","'GlobalStyles' is defined but never used.","'Switch' is defined but never used.","'Button' is defined but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'token' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","'ThemeContext' is assigned a value but never used.","'CircularProgress' is defined but never used.","'Card' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'Typography' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user_id'. Either include it or remove the dependency array.",["369"],["370"],"no-global-assign","no-unsafe-negation",{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"389","fix":"391"},"Update the dependencies array to be: [dispatch]",{"range":"392","text":"393"},"Update the dependencies array to be: [dispatch, props.history, user.isLoggedIn, user.user.IsAdmin]",{"range":"394","text":"395"},"Update the dependencies array to be: [search, user.queryString]",{"range":"396","text":"397"},"Update the dependencies array to be: [contest, fetchData]",{"range":"398","text":"399"},"Update the dependencies array to be: [getUserDetails, movie_id, user.isLoggedIn]",{"range":"400","text":"401"},"Update the dependencies array to be: [creditsapi]",{"range":"402","text":"403"},"Update the dependencies array to be: [user.isLoggedIn, user.user]",{"range":"404","text":"405"},"Update the dependencies array to be: [fetchData, user.isLoggedIn, user.user]",{"range":"406","text":"407"},"Update the dependencies array to be: [fetchData, user.blacklist, user.isLoggedIn]",{"range":"408","text":"409"},"Update the dependencies array to be: [user_id]",{"range":"410","text":"411"},{"range":"412","text":"411"},[2634,2636],"[dispatch]",[980,1022],"[dispatch, props.history, user.isLoggedIn, user.user.IsAdmin]",[2264,2282],"[search, user.queryString]",[5123,5132],"[contest, fetchData]",[2172,2189],"[getUserDetails, movie_id, user.isLoggedIn]",[3313,3315],"[creditsapi]",[2225,2242],"[user.isLoggedIn, user.user]",[8621,8638],"[fetchData, user.isLoggedIn, user.user]",[6688,6705],"[fetchData, user.blacklist, user.isLoggedIn]",[1832,1834],"[user_id]",[2799,2801]]